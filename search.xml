<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>了解我们</title>
      <link href="//aboutUs/"/>
      <url>//aboutUs/</url>
      
        <content type="html"><![CDATA[<h2 id="实验室"><a href="#实验室" class="headerlink" title="实验室"></a>实验室</h2><a class="btn-beautify blue larger" href="https://oj.zua.fan" title="OJ"><i class="fas fa-code"></i><span>OJ</span></a><a class="btn-beautify blue larger" href="/team/" title="成员"><i class="fas fa-users"></i><span>成员</span></a><a class="btn-beautify blue larger" href="/award/" title="荣誉"><i class="fas fa-award"></i><span>荣誉</span></a><a class="btn-beautify blue larger" href="/photo/" title="照片"><i class="fas fa-camera"></i><span>照片</span></a><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><a class="btn-beautify blue larger" href="/we/" title="加入我们"><i class="fas fa-info-circle"></i><span>加入我们</span></a><a class="btn-beautify blue larger" href="/contest/" title="赛事介绍"><i class="fas fa-trophy"></i><span>赛事介绍</span></a><a class="btn-beautify blue larger" href="/guide/" title="入门指南"><i class="fas fa-book-open"></i><span>入门指南</span></a>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024年招新解谜活动</title>
      <link href="/2024/10/05/puzzle2024/"/>
      <url>/2024/10/05/puzzle2024/</url>
      
        <content type="html"><![CDATA[<p>为庆祝不久之后的1024程序员日（10月24日）、提升同学们对计算机的学习兴趣，现我协会借招新之机向广大郑航学子发出<strong>系列闯关挑战</strong>。</p><p>在本次闯关活动中，我们准备了若干个关卡的题目。<br>这些关卡涵盖多方面的知识，每个关卡难度各有不同，整体上由易到难。<br>你需要<strong>从第一关开始依次完成，每通过一关将获得解锁下一关的密码</strong>。<br><strong>在活动结束前最先通过全部关卡的前5名同学将会获得订制卡片U盘一个</strong>（内附学长珍藏 学❤习❤资❤料）。<br>当然，你也不用担心能不能闯关成功。我们可能会结合大家的完成情况给予一些奖励。我们希望更多的同学能够参与进来。</p><p><strong>题目均不要求编程，只是解谜，有耐心和思维就能解题！！！</strong></p><p>我们相信你在这次活动中会学到很多知识。祝你玩得开心！</p><p>挑战活动时间：<strong>10月11日18:30~10月13日18:30</strong>（共48小时）</p><h3 id="参与方式"><a href="#参与方式" class="headerlink" title="参与方式"></a>参与方式</h3><p>进入<a href="https://oj.zua.fan/group/1001">https://oj.zua.fan/group/1001</a>，注册账号（或使用已用账号）后即可参与。</p><p><img src="/img/image-20241011175907090.png"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p><strong>请认真阅读活动页面的说明</strong>。</p></li><li><p>对于系统使用的疑问，可以直接在新生QQ群（143751277）内找管理员解决。</p></li><li><p><strong>对于题目和关卡内容，不得以任何形式、任何地方与他人交流，也不得直接使用人工智能完成。一旦查出作弊，取消活动资格，并且禁止加入软件开发协会。</strong><br><img src="/img/1728641743401.jpg"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ICPC 常用算法模板</title>
      <link href="/2024/05/14/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/"/>
      <url>/2024/05/14/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<img src="https://th.bing.com/th/id/R.f8b1650614899d6fdca02fd4db82b58b?rik=lV6lJ3KPFO%2befA&riu=http%3a%2f%2ficpc.sharif.edu%2f2019%2fiipc%2fscoreboard%2fimg%2ficpc.png&ehk=llTrWA%2be44qZNMBB9dx6FTepVu%2b20CysvxvlqUY59%2bw%3d&risl=&pid=ImgRaw&r=0" alt="ACM-ICPC Scoreboard" style="zoom: 10%;" /><h1 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h1><h2 id="尺取法-双指针"><a href="#尺取法-双指针" class="headerlink" title="尺取法&#x2F;双指针"></a>尺取法&#x2F;双指针</h2><p>$O(n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尺取法获取第k近的点下标</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getKth</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = k + <span class="number">1</span>;</span><br><span class="line">    nxt[<span class="number">1</span>] = k + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (r + <span class="number">1</span> &lt;= n &amp;&amp; a[i] - a[l] &gt; a[r + <span class="number">1</span>] - a[i])</span><br><span class="line">            l++, r++;</span><br><span class="line">        <span class="keyword">if</span> (a[i] - a[l] &lt; a[r] - a[i])</span><br><span class="line">            nxt[i] = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            nxt[i] = l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (++mp[a[x]] == <span class="number">1</span>) cnt++; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (--mp[a[x]] == <span class="number">0</span>) cnt--; &#125;</span><br><span class="line"><span class="comment">// 尺取法，f[i] 表示区间 [i, f[i]] 中有k个不同的数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>; l &lt;= n; l++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (cnt &lt; k &amp;&amp; r &lt;= n)</span><br><span class="line">        <span class="built_in">add</span>(r++);</span><br><span class="line">    <span class="keyword">if</span> (cnt == k)</span><br><span class="line">        f[l] = r - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f[l] = n + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">del</span>(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; sum += a[x]; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; sum -= a[x]; &#125;</span><br><span class="line">sum = <span class="number">0</span>, res = n + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 查询满足区间和大于等于 s 的最短区间</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>; l &lt;= n; l++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (sum &lt; s &amp;&amp; r &lt;= n)</span><br><span class="line">        <span class="built_in">add</span>(r++);</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; s)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    res = <span class="built_in">min</span>(res, r - l);</span><br><span class="line">    <span class="built_in">del</span>(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分和二分答案"><a href="#二分和二分答案" class="headerlink" title="二分和二分答案"></a>二分和二分答案</h2><p>$O(\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> l, r， m; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span> (r - l &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(m = (l + r) / <span class="number">2</span>))</span><br><span class="line">l = m;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = m;</span><br><span class="line"><span class="comment">// l : last true</span></span><br><span class="line"><span class="comment">// r : first false</span></span><br><span class="line"><span class="comment">// lower_bound(x) | check(mid) &lt;x -&gt; r |</span></span><br><span class="line"><span class="comment">// upper_bound(x) | check(mid)&lt;=x -&gt; r |</span></span><br></pre></td></tr></table></figure><h2 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h2><h3 id="快速幂式"><a href="#快速幂式" class="headerlink" title="快速幂式"></a>快速幂式</h3><p>$O(n\log m)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n个点跳跃m次位置</span></span><br><span class="line"><span class="function">vector&lt;ll&gt; <span class="title">f</span><span class="params">(nxt)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (; m; m &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m &amp; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            ans[i] = f[ans[i]]; <span class="comment">//从上次的位置接着跳</span></span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">ff</span><span class="params">(f)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        f[i] = ff[ff[i]]; <span class="comment">//倍增跳</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="朴素式"><a href="#朴素式" class="headerlink" title="朴素式"></a>朴素式</h3><p>$O(n\log m)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">vector&lt;vector&lt;ll&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;ll&gt;(__lg(m) + <span class="number">2</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    f[i][<span class="number">0</span>] = nxt[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt;= __lg(m) + <span class="number">1</span>; t++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        f[i][t] = f[f[i][t - <span class="number">1</span>]][t - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> t = __lg(m) + <span class="number">1</span>; t &gt;= <span class="number">0</span>; t--)</span><br><span class="line"><span class="keyword">if</span> (f[p][t] is 合法) &#123;</span><br><span class="line">        p = f[p][t];</span><br><span class="line">        其他操作</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h2><h3 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h3><p>前缀和: $pr_i &#x3D; pr_{i-1}+a_i$</p><p>差分: $df_i&#x3D;a_i-a_{i-1}$</p><p>差分区间修改:</p><p>$$<br>\mathrm{add}(l,r,k)\to<br>\begin{cases}<br>df_l\gets df_l+k,\newline<br>df_{r+1}\gets df_{r+1}-k<br>\end{cases}<br>$$</p><h3 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h3><p>前缀和: $pr_{i,j}&#x3D;pr_{i,j-1}+pr_{i-1,j}-pr_{i-1,j-1}+a_{i,j}$</p><p>差分: $df_{i,j}&#x3D;a_{i,j}-a_{i-1,j}-a_{i,j-1}+a_{i-1,j-1}$</p><p>差分区间修改:</p><p>$$<br>\mathrm{add}((x_1,y_1),(x_2,y_2),k)\to<br>\begin{cases}<br>df_{x_1,y_1}\gets df_{x_1,y_1}+k\newline<br>df_{x_1,y_2+1}\gets df_{x_1,y_2+1}-k\newline<br>df_{x_2+1,y1}\gets df_{x_2+1,y1}-k\newline<br>df_{x_2+1,y_2+1}\gets df_{x_2+1,y_2+1}+k\newline<br>\end{cases}<br>$$</p><h3 id="树上"><a href="#树上" class="headerlink" title="树上"></a>树上</h3><p>前缀和: 设 $pr_i$ 表示结点 $i$ 到根节点的权值总和。</p><ul><li>若是点权, $x,y$ 路径上的和为 $pr_x + pr_y - pr_{lca} - pr_{fa(lca)}$。</li><li>若是边权, $x,y$ 路径上的和为 $pr_x + pr_y - 2\cdot pr_{lca}$。</li></ul><p>差分: </p><p>对于一次 $\delta(s,t)$ 的访问</p><ul><li>点差分:</li></ul><p>$$<br>\begin{cases}<br>d_s\gets d_s+1,\newline<br>d_{lca}\gets d_{\textit{lca}}-1\newline<br>d_t\gets d_t+1\newline<br>d_{fa(lca)}\gets d_{fa(lca)}-1\newline<br>\end{cases}<br>$$</p><ul><li>边差分:</li></ul><p>$$<br>\begin{cases}<br>d_s\gets d_s+1\newline<br>d_t\gets d_t+1\newline<br>d_{lca}\gets d_{lca}-2\newline<br>\end{cases}<br>$$</p><h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><p>$a{1,10,100,1000}\to a{1,2,3,4},d{1,10,100,1000}$</p><p>将 ${a_i}$ 数组离散化，逆映射保存在 $d_i$ 中。$d:a_{i}’\to a_{i}$</p><p>$O(n\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">compress</span><span class="params">(vector&lt;pii&gt; &amp;a, vector&lt;<span class="type">int</span>&gt; &amp;d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[l, r] : a)</span><br><span class="line">        d.<span class="built_in">push_back</span>(l), d.<span class="built_in">push_back</span>(r);</span><br><span class="line">    <span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">    d.<span class="built_in">erase</span>(<span class="built_in">unique</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>()), d.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">auto</span> get = [&amp;d](<span class="type">int</span> x) &#123; <span class="keyword">return</span> <span class="built_in">lower_bound</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), x) - d.<span class="built_in">begin</span>(); &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[l, r] : a)</span><br><span class="line">        l = <span class="built_in">get</span>(l), r = <span class="built_in">get</span>(r);</span><br><span class="line">    <span class="keyword">return</span> d.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 离散后修改</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(compress(a, d))</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[l, r] : a)</span><br><span class="line">    <span class="built_in">fill</span>(f.<span class="built_in">begin</span>() + l, f.<span class="built_in">begin</span>() + r, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 逆映射到离散前的原数值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; f.<span class="built_in">size</span>() - <span class="number">1</span>; i++)</span><br><span class="line">    <span class="keyword">if</span> (f[i])</span><br><span class="line">        ans += d[i + <span class="number">1</span>] - d[i];</span><br></pre></td></tr></table></figure><p>二维的可以对两个维度分别离散化</p><h2 id="排列和组合枚举"><a href="#排列和组合枚举" class="headerlink" title="排列和组合枚举"></a>排列和组合枚举</h2><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><p>$O(n!)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="built_in">iota</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">1</span>);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 判断排列的合法性</span></span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()));</span><br></pre></td></tr></table></figure><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>$O(2^n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n = <span class="number">4</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++) &#123;</span><br><span class="line">    <span class="type">int</span> cnt = __builtin_popcount(i);</span><br><span class="line">    a[cnt]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断某位</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><p><strong>维护某值的左边第一大，右边第一小</strong> $O(n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; a[s.<span class="built_in">top</span>()] &lt; a[i]) &#123;<span class="comment">// 单调递减栈</span></span><br><span class="line">        <span class="comment">// 此时a[i]是第一个 &gt; a[s.top()]的数</span></span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此时a[i]左边有 s.size() 个 &gt;= a[i] 的数</span></span><br><span class="line">    <span class="comment">// 此时a[i]是第一个 &lt;= a[s.top()]的数</span></span><br><span class="line">    s.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><p><strong>维护k区间最值</strong> $O(n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; i - q.<span class="built_in">front</span>() &gt;= k) <span class="comment">// 调整覆盖范围</span></span><br><span class="line">        q.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; a[q.<span class="built_in">back</span>()] &lt; a[i]) <span class="comment">// 保持单调递减</span></span><br><span class="line">        q.<span class="built_in">pop_back</span>();</span><br><span class="line">    q.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; a[q.<span class="built_in">front</span>()] &lt;&lt; endl; <span class="comment">// 区间[i-k+1,i]最大值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ST表-稀疏表-Sparse-Table"><a href="#ST表-稀疏表-Sparse-Table" class="headerlink" title="ST表&#x2F;稀疏表&#x2F;Sparse Table"></a>ST表&#x2F;稀疏表&#x2F;Sparse Table</h2><p><strong>维护区间最值</strong></p><p>预处理: $O(n\log n)$</p><p>查询: $O(1)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="built_in">T</span> (*op)(T, T)&gt; <span class="keyword">struct</span> <span class="title class_">SparseTable</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, logn;</span><br><span class="line">    vector&lt;vector&lt;T&gt;&gt; dat;</span><br><span class="line">    <span class="built_in">SparseTable</span>(<span class="type">const</span> vector&lt;T&gt; &amp;v) : <span class="built_in">n</span>(v.<span class="built_in">size</span>()), <span class="built_in">logn</span>(__lg(n) + <span class="number">1</span>), <span class="built_in">dat</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;T&gt;(logn + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            dat[i][<span class="number">0</span>] = v[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= logn; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">                dat[i][j] = <span class="built_in">op</span>(dat[i][j - <span class="number">1</span>], dat[i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = __lg(r - l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">op</span>(dat[l][s], dat[r - (<span class="number">1</span> &lt;&lt; s) + <span class="number">1</span>][s]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxn</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p><strong>维护集合的合并与查询是否相交</strong></p><p>初始化: $O(n)$</p><p>查询&#x2F;合并: $O(\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; p, sz;</span><br><span class="line">    <span class="built_in">DSU</span>(<span class="type">int</span> n = <span class="number">1e6</span>) : <span class="built_in">p</span>(n), <span class="built_in">sz</span>(n, <span class="number">1</span>) &#123; <span class="built_in">iota</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == p[x] ? x : p[x] = <span class="built_in">find</span>(p[x]); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y), (x != y ? p[y] = x, sz[x] += sz[y] : <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> sz[<span class="built_in">find</span>(x)]; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p>维护具有<strong>区间减</strong>性质的序列，维护序列的前缀和信息</p><p>单点修改: $O(\log n)$</p><p>区间查询: $O(\log n)$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    vector&lt;T&gt; dat;</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> n = <span class="number">0</span>) : <span class="built_in">size</span>(n), <span class="built_in">dat</span>(n + <span class="number">1</span>, <span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; -x; &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, T x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= size; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">            dat[i] += x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        T res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="built_in">min</span>(i, size); i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">            res += dat[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">get</span>(r) - <span class="built_in">get</span>(l - <span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthLe</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = size + <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span> (r - l &gt; <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">get</span>(mid = (l + r) &gt;&gt; <span class="number">1</span>) &lt; k ? l = mid : r = mid;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthGe</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = size + <span class="number">1</span>, mid;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">get</span>(size);</span><br><span class="line">        <span class="keyword">while</span> (r - l &gt; <span class="number">1</span>)</span><br><span class="line">            sum - <span class="built_in">get</span>(mid = (l + r) &gt;&gt; <span class="number">1</span>) &lt; k ? r = mid : l = mid;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p>维护“满足<strong>幺半群</strong>（封闭性；结合律；幺元）的性质的信息”的序列</p><p>如区间和、区间积、区间最大&#x2F;小值、区间异或等可合并信息</p><h3 id="zkw线段树"><a href="#zkw线段树" class="headerlink" title="zkw线段树"></a>zkw线段树</h3><p>非递归实现，常数小，功能有限。</p><p>初始化建树: $O(n)$</p><p>单点修改: $O(\log n)$</p><p>区间查询: $O(\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="built_in">T</span> (*op)(T, T), <span class="built_in">T</span> (*e)()&gt; <span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;T&gt; dat;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">const</span> <span class="type">int</span> _n) : <span class="built_in">n</span>(<span class="number">2</span> &lt;&lt; __lg(_n - <span class="number">1</span>)), <span class="built_in">dat</span>(n &lt;&lt; <span class="number">1</span>, <span class="built_in">e</span>()) &#123;&#125;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">const</span> vector&lt;T&gt; &amp;v) : <span class="built_in">n</span>(<span class="number">2</span> &lt;&lt; __lg(v.<span class="built_in">size</span>() - <span class="number">1</span>)), <span class="built_in">dat</span>(n &lt;&lt; <span class="number">1</span>, <span class="built_in">e</span>()) &#123;</span><br><span class="line">        <span class="built_in">copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), dat.<span class="built_in">begin</span>() + n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = n - <span class="number">1</span>; p; p--)</span><br><span class="line">            dat[p] = <span class="built_in">op</span>(dat[p &lt;&lt; <span class="number">1</span>], dat[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> i, T k)</span> </span>&#123; <span class="comment">// update[i]=k</span></span><br><span class="line">        <span class="keyword">for</span> (dat[i += n] = k; i; i &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">            dat[i &gt;&gt; <span class="number">1</span>] = <span class="built_in">op</span>(dat[i], dat[i ^ <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123; <span class="comment">// query[i,j]</span></span><br><span class="line">        T res = <span class="built_in">e</span>();</span><br><span class="line">        <span class="keyword">for</span> (i += n, j += n; i &lt;= j; i &gt;&gt;= <span class="number">1</span>, j &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            res = i &amp; <span class="number">1</span> ? <span class="built_in">op</span>(res, dat[i++]) : res;</span><br><span class="line">            res = j &amp; <span class="number">1</span> ? res : <span class="built_in">op</span>(res, dat[j--]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">Add</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">e</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="线段树-1"><a href="#线段树-1" class="headerlink" title="线段树"></a>线段树</h3><p>结构体实现，可扩展性强；lazy-tag 延迟更新。</p><p>维护 <code>operator+</code> <code>pushup</code> <code>apply</code> <code>pushdown</code> 实现区间信息合并、标记与下传。</p><p>初始化建树: $O(n)$</p><p>区间修改: $O(\log n)$</p><p>区间查询: $O(\log n)$</p><p>单点修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Info&gt; <span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;Info&gt; info;</span><br><span class="line">    <span class="built_in">SegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n_) : <span class="built_in">n</span>(n_), <span class="built_in">info</span>(<span class="number">4</span> &lt;&lt; __lg(n)) &#123;&#125;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">const</span> vector&lt;Info&gt; &amp;a) : <span class="built_in">SegmentTree</span>(a.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">void</span>(info[p] = a[l - <span class="number">1</span>]);</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, m);</span><br><span class="line">            <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">            info[p] = info[p &lt;&lt; <span class="number">1</span>] + info[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; l || r &lt; i)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">void</span>(info[p] = v);</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">modify</span>(p &lt;&lt; <span class="number">1</span>, l, m, i, v);</span><br><span class="line">        <span class="built_in">modify</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, i, v);</span><br><span class="line">        info[p] = info[p &lt;&lt; <span class="number">1</span>] + info[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123; <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, v); &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; l || r &lt; a)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= l &amp;&amp; r &lt;= b)</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(p &lt;&lt; <span class="number">1</span>, l, m, a, b) + <span class="built_in">rangeQuery</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">1</span>, n, a, b); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>区间修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Info, <span class="keyword">typename</span> Tag&gt; <span class="keyword">struct</span> <span class="title class_">LazySegmentTree</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;Info&gt; info;</span><br><span class="line">    vector&lt;Tag&gt; tag;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>() : <span class="built_in">n</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">int</span> n_) : <span class="built_in">n</span>(n_), <span class="built_in">info</span>(<span class="number">4</span> &lt;&lt; __lg(n)), <span class="built_in">tag</span>(<span class="number">4</span> &lt;&lt; __lg(n)) &#123;&#125;</span><br><span class="line">    <span class="built_in">LazySegmentTree</span>(<span class="type">const</span> vector&lt;Info&gt; &amp;a) : <span class="built_in">LazySegmentTree</span>(a.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">void</span>(info[p] = a[l - <span class="number">1</span>]);</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span>, l, m);</span><br><span class="line">            <span class="built_in">build</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">            info[p] = info[p &lt;&lt; <span class="number">1</span>] + info[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        info[p].<span class="built_in">apply</span>(l, r, v);</span><br><span class="line">        tag[p].<span class="built_in">apply</span>(l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">apply</span>(p &lt;&lt; <span class="number">1</span>, l, m, tag[p]);</span><br><span class="line">        <span class="built_in">apply</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, tag[p]);</span><br><span class="line">        tag[p] = <span class="built_in">Tag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; l || r &lt; x)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">void</span>(info[p] = v);</span><br><span class="line">        <span class="built_in">pushdown</span>(p, l, r);</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">modify</span>(p &lt;&lt; <span class="number">1</span>, l, m, x, v);</span><br><span class="line">        <span class="built_in">modify</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, x, v);</span><br><span class="line">        info[p] = info[p &lt;&lt; <span class="number">1</span>] + info[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span> </span>&#123; <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, v); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">const</span> Tag &amp;v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; l || r &lt; a)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= l &amp;&amp; r &lt;= b)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">apply</span>(p, l, r, v);</span><br><span class="line">        <span class="built_in">pushdown</span>(p, l, r);</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">rangeApply</span>(p &lt;&lt; <span class="number">1</span>, l, m, a, b, v);</span><br><span class="line">        <span class="built_in">rangeApply</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, a, b, v);</span><br><span class="line">        info[p] = info[p &lt;&lt; <span class="number">1</span>] + info[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rangeApply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">const</span> Tag &amp;v)</span> </span>&#123; <span class="built_in">rangeApply</span>(<span class="number">1</span>, <span class="number">1</span>, n, a, b, v); &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b &lt; l || r &lt; a)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= l &amp;&amp; r &lt;= b)</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        <span class="built_in">pushdown</span>(p, l, r);</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(p &lt;&lt; <span class="number">1</span>, l, m, a, b) + <span class="built_in">rangeQuery</span>(p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, m + <span class="number">1</span>, r, a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Info <span class="title">rangeQuery</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">rangeQuery</span>(<span class="number">1</span>, <span class="number">1</span>, n, a, b); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tag</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>&#123; x += v.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">apply</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">const</span> Tag &amp;v)</span> </span>&#123; sum += (r - l + <span class="number">1</span>) * v.x; &#125;</span><br><span class="line">    <span class="keyword">friend</span> Info <span class="keyword">operator</span>+(Info a, Info b) &#123; <span class="keyword">return</span> Info&#123;a.sum + b.sum&#125;; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// void modifty(int a, int b, T k, int p = 1) &#123;</span></span><br><span class="line"><span class="comment">//     if (a &lt;= tr[p].l &amp;&amp; tr[p].r &lt;= b)</span></span><br><span class="line"><span class="comment">//         return mark(k, p);</span></span><br><span class="line"><span class="comment">//     pushdown(p);</span></span><br><span class="line"><span class="comment">//     int mid = (tr[p].l + tr[p].r) &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">//     if (a &lt;= mid) modifty(a, b, k, p &lt;&lt; 1); // 左半区间与修改区间相交</span></span><br><span class="line"><span class="comment">//     if (b &gt; mid) modifty(a, b, k, p &lt;&lt; 1 | 1); // 右半区间与修改区间相交</span></span><br><span class="line"><span class="comment">//     tr[p] = tr[p &lt;&lt; 1] + tr[p &lt;&lt; 1 | 1];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// Node query(int a, int b, int p = 1) &#123;</span></span><br><span class="line"><span class="comment">//     if (a &lt;= tr[p].l &amp;&amp; tr[p].r &lt;= b)</span></span><br><span class="line"><span class="comment">//         return tr[p];</span></span><br><span class="line"><span class="comment">//     pushdown(p);</span></span><br><span class="line"><span class="comment">//     int mid = (tr[p].l + tr[p].r) &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">//     if (b &lt;= mid) return query(a, b, p &lt;&lt; 1); // 只有左半区间与查询区间相交</span></span><br><span class="line"><span class="comment">//     else if (a &gt; mid) return query(a, b, p &lt;&lt; 1 | 1); // 只有右半区间与查询区间相交</span></span><br><span class="line"><span class="comment">//     else return query(a, b, p &lt;&lt; 1) + query(a, b, p &lt;&lt; 1 | 1); // (a &lt;= mid &lt; b) 两端区间都与查询区间相交</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="可持久化线段树-主席树"><a href="#可持久化线段树-主席树" class="headerlink" title="可持久化线段树&#x2F;主席树"></a>可持久化线段树&#x2F;主席树</h3><p>$O(\log n)$ 修改和查询</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;Node&gt; tr;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; rt;</span><br><span class="line">    <span class="type">int</span> n, cnt;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">update</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> d, <span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> q = tr.<span class="built_in">size</span>();</span><br><span class="line">        tr.<span class="built_in">push_back</span>(tr[p]);</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tr[q].sum += d;</span><br><span class="line">            <span class="keyword">return</span> q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= mid)</span><br><span class="line">            tr[q].l = <span class="built_in">update</span>(k, d, tr[p].l, l, mid);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tr[q].r = <span class="built_in">update</span>(k, d, tr[p].r, mid + <span class="number">1</span>, r);</span><br><span class="line">        tr[q].sum = tr[tr[q].l].sum + tr[tr[q].r].sum;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> p, <span class="type">int</span> q, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> x = tr[tr[q].l].sum - tr[tr[p].l].sum;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= k)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">kth</span>(k, tr[p].l, tr[q].l, l, mid);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">kth</span>(k - x, tr[p].r, tr[q].r, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">rt</span>(<span class="number">1</span>), <span class="built_in">cnt</span>(<span class="number">1</span>), <span class="built_in">tr</span>(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> d)</span> </span>&#123; rt.<span class="built_in">push_back</span>(<span class="built_in">update</span>(k, d, rt.<span class="built_in">back</span>(), <span class="number">1</span>, n)); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> p, <span class="type">int</span> q)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">kth</span>(k, rt[p - <span class="number">1</span>], rt[q], <span class="number">1</span>, n); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="分块与莫队算法"><a href="#分块与莫队算法" class="headerlink" title="分块与莫队算法"></a>分块与莫队算法</h2><h3 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h3><p>$O(n)$ 预处理， $O(\sqrt{n})$ 查询</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">Block</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, t, m;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; l, r, id;</span><br><span class="line">    vector&lt;T&gt; &amp;v, sum, tag;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> a, <span class="type">int</span> b, T k)</span> </span>&#123;</span><br><span class="line">        sum[p] += k * (b - a + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a; i &lt;= b; i++)</span><br><span class="line">            v[i] += k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">ask</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        T res = tag[p] * (b - a + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = a; i &lt;= b; i++)</span><br><span class="line">            res += v[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Block</span>(vector&lt;T&gt; &amp;v) <span class="comment">// 1-index</span></span><br><span class="line">        : <span class="built_in">n</span>(v.<span class="built_in">size</span>() - <span class="number">1</span>), <span class="built_in">t</span>(<span class="built_in">sqrt</span>(n)), <span class="built_in">m</span>(n / t + (n % t &gt; <span class="number">0</span>)), <span class="built_in">l</span>(m + <span class="number">1</span>), <span class="built_in">r</span>(m + <span class="number">1</span>), <span class="built_in">id</span>(n + <span class="number">1</span>),</span><br><span class="line">      <span class="built_in">v</span>(v), <span class="built_in">sum</span>(m + <span class="number">1</span>), <span class="built_in">tag</span>(m + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            l[i] = (i - <span class="number">1</span>) * t + <span class="number">1</span>, r[i] = <span class="built_in">min</span>(i * t, n);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = l[i]; j &lt;= r[i]; j++) &#123;</span><br><span class="line">                sum[i] += v[j];</span><br><span class="line">                id[j] = (j - <span class="number">1</span>) / t + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, T k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = id[a], q = id[b];</span><br><span class="line">        <span class="keyword">if</span> (p == q) &#123;</span><br><span class="line">            <span class="built_in">add</span>(p, a, b, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = p + <span class="number">1</span>; i &lt;= q - <span class="number">1</span>; i++)</span><br><span class="line">                tag[i] += k;</span><br><span class="line">            <span class="built_in">add</span>(p, a, r[p], k);</span><br><span class="line">            <span class="built_in">add</span>(q, l[q], b, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T <span class="title">query</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        T res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> p = id[a], q = id[b];</span><br><span class="line">        <span class="keyword">if</span> (p == q) &#123;</span><br><span class="line">            res += <span class="built_in">ask</span>(p, a, b);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = p + <span class="number">1</span>; i &lt;= q - <span class="number">1</span>; i++)</span><br><span class="line">                res += sum[i] + tag[i] * (r[i] - l[i] + <span class="number">1</span>);</span><br><span class="line">            res += <span class="built_in">ask</span>(p, a, r[p]);</span><br><span class="line">            res += <span class="built_in">ask</span>(q, l[q], b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉搜索树-平衡树"><a href="#二叉搜索树-平衡树" class="headerlink" title="二叉搜索树&amp;平衡树"></a>二叉搜索树&amp;平衡树</h2><h3 id="vector平衡树"><a href="#vector平衡树" class="headerlink" title="vector平衡树"></a>vector平衡树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">BST</span> &#123;</span><br><span class="line">    vector&lt;T&gt; tr;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(T x)</span> </span>&#123; tr.<span class="built_in">insert</span>(<span class="built_in">lower_bound</span>(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>(), x), x); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T x)</span> </span>&#123; tr.<span class="built_in">erase</span>(<span class="built_in">lower_bound</span>(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>(), x)); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rank</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">lower_bound</span>(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>(), x) - tr.<span class="built_in">begin</span>() + <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> tr.<span class="built_in">at</span>(x - <span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">prev</span>(<span class="built_in">lower_bound</span>(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>(), x)); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nxt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">upper_bound</span>(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>(), x); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="存图"><a href="#存图" class="headerlink" title="存图"></a>存图</h2><h3 id="邻接表-邻接矩阵"><a href="#邻接表-邻接矩阵" class="headerlink" title="邻接表&#x2F;邻接矩阵"></a>邻接表&#x2F;邻接矩阵</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Node = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[N];</span><br><span class="line"><span class="type">int</span> G[N][N]; <span class="comment">//</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">    G[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">    G[v].<span class="built_in">push_back</span>(&#123;u, w&#125;);</span><br><span class="line">    G[u][v] = G[v][u] = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; u++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[v, w] : G[u]) &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> v = <span class="number">0</span>; v &lt; n; v++) <span class="keyword">if</span> (G[u][v]) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ChainForwardStar</span> &#123;</span><br><span class="line">    <span class="keyword">using</span> Edge = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; head, next;</span><br><span class="line">    vector&lt;Edge&gt; edges;</span><br><span class="line">    <span class="type">int</span> E;</span><br><span class="line">    <span class="built_in">ChainForwardStar</span>(<span class="type">int</span> V = <span class="number">0</span>) &#123; head.<span class="built_in">resize</span>(V + <span class="number">1</span>, <span class="number">-1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">        edges.<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">        next.<span class="built_in">push_back</span>(head[u]);</span><br><span class="line">        head[u] = E++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">ChainForwardStar <span class="title">G</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="type">int</span> u, v, w;</span><br><span class="line">    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">    G.<span class="built_in">addEdge</span>(u, v, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; n; u++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = G.head[u]; ~i; i = G.next[i]) &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;[v, w] = G.edges[i];</span><br><span class="line">        cout &lt;&lt; u &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; w &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="DFS-BFS"><a href="#DFS-BFS" class="headerlink" title="DFS&#x2F;BFS"></a>DFS&#x2F;BFS</h2><p>$O(n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[u])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v : G[u])</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; Q;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(u);</span><br><span class="line">    <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : G[u])</span><br><span class="line">            <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">                vis[v] = <span class="literal">true</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>$O(n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">int</span> indeg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">tsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; u++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : G[u])</span><br><span class="line">            indeg[v]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">1</span>; u &lt;= n; u++)</span><br><span class="line">        <span class="keyword">if</span> (indeg[u] == <span class="number">0</span>)</span><br><span class="line">            q.<span class="built_in">push</span>(u);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans.<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : G[u])</span><br><span class="line">            <span class="keyword">if</span> (--indeg[v] == <span class="number">0</span>)</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans.<span class="built_in">size</span>() == n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><p>朴素算法: $O(n^2)$</p><p>堆优化: $O(m\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(<span class="number">0</span>, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> u = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; V; i++)</span><br><span class="line">            <span class="keyword">if</span> ((u == <span class="number">-1</span> || dist[u] &gt; dist[i]) &amp;&amp; !vis[i])</span><br><span class="line">                u = i;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        vis[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[v, w] : G[u])</span><br><span class="line">            dist[v] = <span class="built_in">min</span>(dist[v], dist[u] + w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra_heap</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;Node, vector&lt;Node&gt;, greater&lt;Node&gt;&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(<span class="number">0</span>, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> [dist_u, u] = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (dist[u] &lt; dist_u)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[v, w] : G[u])</span><br><span class="line">            <span class="keyword">if</span> (dist[v] &gt; dist[u] + w)</span><br><span class="line">                q.<span class="built_in">push</span>(&#123;dist[v] = dist[u] + w, v&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="kurskal"><a href="#kurskal" class="headerlink" title="kurskal"></a>kurskal</h3><p>$O(m\log m)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; p;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == p[x] ? x : p[x] = <span class="built_in">find</span>(p[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    p.<span class="built_in">resize</span>(V + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">iota</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">sort</span>(edges.<span class="built_in">begin</span>(), edges.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[u, v, w] : edges)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(u) != <span class="built_in">find</span>(v)) &#123;</span><br><span class="line">            sum += w;</span><br><span class="line">            cnt++;</span><br><span class="line">            p[<span class="built_in">find</span>(u)] = <span class="built_in">find</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt == V - <span class="number">1</span> ? sum : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><p>$O(n)$ dfs预处理，$O(\log n)$ 查询</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[N];</span><br><span class="line"><span class="type">int</span> dep[N], p[N][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line">    p[u][<span class="number">0</span>] = fa;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; t) &lt;= dep[u]; t++)</span><br><span class="line">        p[u][t] = p[p[u][t - <span class="number">1</span>]][t - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v : G[u])</span><br><span class="line">        <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(v, u);</span><br><span class="line">            dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &lt; dep[y])</span><br><span class="line">        <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (dep[x] - (<span class="number">1</span> &lt;&lt; i) &gt;= dep[y])</span><br><span class="line">            x = p[x][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (p[x][i] != p[y][i])</span><br><span class="line">            x = p[x][i], y = p[x][i];</span><br><span class="line">    <span class="keyword">return</span> p[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无向图的双连通分量"><a href="#无向图的双连通分量" class="headerlink" title="无向图的双连通分量"></a>无向图的双连通分量</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x 代表当前搜索树的根节点，in_edge 代表其对应的序号（tot）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> in_edge)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在搜索之前，先初始化节点 x 的时间戳与追溯值</span></span><br><span class="line">    dfn[x] = low[x] = ++num;</span><br><span class="line">    <span class="comment">// 通过 head 变量获取节点 x 的直接连接的第一个相邻节点的序号</span></span><br><span class="line">    <span class="comment">// 通过 Next 变量，迭代获取剩下的与节点 x 直接连接的节点的序号</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[x]; i; i = Next[i]) &#123;</span><br><span class="line">        <span class="comment">// 此时，i 代表节点 y 的序号</span></span><br><span class="line">        <span class="type">int</span> y = ver[i];</span><br><span class="line">        <span class="comment">// 如果当前节点 y 没有被访问过</span></span><br><span class="line">        <span class="keyword">if</span> (!dfn[y]) &#123;</span><br><span class="line">            <span class="comment">// 递归搜索以 y 为跟的子树</span></span><br><span class="line">            <span class="built_in">tarjan</span>(y, i);</span><br><span class="line">            <span class="comment">// 计算 x 的追溯值</span></span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">            <span class="comment">// 桥的判定法则</span></span><br><span class="line">            <span class="keyword">if</span> (low[y] &gt; dfn[x])</span><br><span class="line">                bridge[i] = bridge[i ^ <span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 标记当前节点是否为桥（具体见下文）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (i != (in_edge ^ <span class="number">1</span>)) <span class="comment">// 当前节点被访问过，且 y 不是 x 的“父节点”（具体见下文）</span></span><br><span class="line">            low[x] = <span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有向图的强连通分量"><a href="#有向图的强连通分量" class="headerlink" title="有向图的强连通分量"></a>有向图的强连通分量</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">//u的时间戳</span></span><br><span class="line"> dfn[u] = low[u] = ++timestamp;</span><br><span class="line">     <span class="comment">//把当前点加到栈中  当前点在栈中</span></span><br><span class="line">    stk[++top] = u,in_stk[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=h[u];i!=<span class="number">-1</span>;i=ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j=e[i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[j])<span class="comment">//j点未被遍历过</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(j);<span class="comment">//继续dfs 遍历j</span></span><br><span class="line">            <span class="comment">//j也许存在反向边到达比u还高的层,所以用j能到的最小dfn序(最高点)更新u能达到的(最小dfn序)最高点</span></span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u],low[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//j点在栈中  说明还没出栈 是dfs序比当前点u小的</span></span><br><span class="line">        <span class="comment">//则其 1要么是横插边(左边分支的点)</span></span><br><span class="line">        <span class="comment">//         o</span></span><br><span class="line">        <span class="comment">//        / \</span></span><br><span class="line"><span class="comment">        //       j ← u    </span></span><br><span class="line">        <span class="comment">//     2要么是u的祖宗节点</span></span><br><span class="line">        <span class="comment">//         j</span></span><br><span class="line">        <span class="comment">//      ↗/ </span></span><br><span class="line">        <span class="comment">//       u    </span></span><br><span class="line">        <span class="comment">//    两种情况u的dfs序都比j大 所以用dfn[j]更新low[u]</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(in_stk[j])</span><br><span class="line">        &#123;</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u],dfn[j]);<span class="comment">//直接用j的时间戳更新u</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//栈代表当前未被搜完的强连通分量的所有点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ⭐</span></span><br><span class="line">    <span class="comment">// 解释一下为什么tarjan完是逆dfs序</span></span><br><span class="line">    <span class="comment">// 假设这里是最高的根节点fa</span></span><br><span class="line">    <span class="comment">// 上面几行中 fa的儿子节点j都已经在它们的递归中走完了下面9行代码</span></span><br><span class="line">    <span class="comment">// 其中就包括 ++scc_cnt </span></span><br><span class="line">    <span class="comment">// 即递归回溯到高层节点的时候 子节点的scc都求完了</span></span><br><span class="line">    <span class="comment">// 节点越高 scc_id越大</span></span><br><span class="line">    <span class="comment">// 在我们后面想求链路dp的时候又得从更高层往下</span></span><br><span class="line">    <span class="comment">// 所以得for(int i=scc_cnt(根节点所在的scc);i;i--)开始</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所以当遍历完u的所有能到的点后 发现u最高能到的点是自己</span></span><br><span class="line">    <span class="comment">// 1 则u为强连通分量中的最高点,则以u为起点往下把该强连通分量所有节点都找出来</span></span><br><span class="line">    <span class="comment">// 2 要么它就没有环,就是一个正常的往下的点</span></span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        ++scc_cnt;<span class="comment">//强连通分量总数+1</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            y = stk[top--];<span class="comment">//取栈顶元素y</span></span><br><span class="line">            in_stk[y] = <span class="literal">false</span>;<span class="comment">//则y不再在栈中</span></span><br><span class="line">            id[y] = scc_cnt;</span><br><span class="line">            Size[scc_cnt] ++;<span class="comment">//第scc_cnt个连通块点数+1</span></span><br><span class="line">        &#125;<span class="keyword">while</span>(y!=u);</span><br><span class="line">        <span class="comment">//1 因为栈中越高的元素的dfs序越大,那么我们只需要把dfs序比u大的这些pop到u</span></span><br><span class="line">        <span class="comment">//即因为最终会从下至上回到u 所以当y==u     </span></span><br><span class="line">        <span class="comment">//则说明点u所在的所有强连通分量都标记了id</span></span><br><span class="line">        <span class="comment">//           →  u</span></span><br><span class="line">        <span class="comment">//          /  /</span></span><br><span class="line">        <span class="comment">//         /  ne1</span></span><br><span class="line">        <span class="comment">//         ← ne2</span></span><br><span class="line">        <span class="comment">//      因为ne2会在u能到的dfs序里最大的,也就是此时的栈顶</span></span><br><span class="line">        <span class="comment">//      那么我们就逐一pop出ne2和ne1</span></span><br><span class="line">        <span class="comment">//2 要么它就是一个没有环的点 则该点单点成一个连通分量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="割点"><a href="#割点" class="headerlink" title="割点"></a>割点</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> V = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> dfn[V], low[V], parent[V];</span><br><span class="line"><span class="type">bool</span> vis[V], ap[V];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 子树数量</span></span><br><span class="line">    <span class="type">int</span> children = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 默认low[u]等于dfn[u]</span></span><br><span class="line">    dfn[u] = low[u] = ++count;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历与u相邻的所有顶点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v: g[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// (u, v)为树边</span></span><br><span class="line">        <span class="keyword">if</span> (!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 递增子树数量</span></span><br><span class="line">            children++;</span><br><span class="line">            <span class="comment">// 设置v的父亲为u</span></span><br><span class="line">            parent[v] = u;</span><br><span class="line">            <span class="comment">// 继续DFS</span></span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">            <span class="comment">// DFS完毕，low[v]已求出，如果low[v]&lt;low[u]则更新low[u]</span></span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果是根节点且有两棵以上的子树则是割点</span></span><br><span class="line">            <span class="keyword">if</span> (parent[u] == <span class="number">-1</span> &amp;&amp; children &gt;= <span class="number">2</span>)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Articulation point: &quot;</span> &lt;&lt; u &lt;&lt; endl;</span><br><span class="line">            <span class="comment">// 如果不是根节点且low[v]&gt;=dfn[u]则是割点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (parent[u] != <span class="number">-1</span> &amp;&amp; low[v] &gt;= dfn[u])</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Articulation point: &quot;</span> &lt;&lt; u &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// (u, v)为回边，且v不是u的父亲</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (v != parent[u])</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>实用函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getBit</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> (a &gt;&gt; b) &amp; <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">unsetBit</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &amp; ~(<span class="number">1</span> &lt;&lt; b); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">setBit</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a | (<span class="number">1</span> &lt;&lt; b); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">flapBit</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a ^ (<span class="number">1</span> &lt;&lt; b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __builtin_popcount(<span class="type">int</span> n) <span class="comment">// 返回n的二进制中有多少个1</span></span><br><span class="line"><span class="type">int</span> __builtin_parity(<span class="type">int</span> n)   <span class="comment">// 判断n的二进制中1的个数的奇偶性，偶0奇1</span></span><br><span class="line"><span class="type">int</span> __builtin_ffs(<span class="type">int</span> n) <span class="comment">// 返回n的二进制末尾最后一个1的位置，从一开始</span></span><br><span class="line"><span class="type">int</span> __builtin_clz(<span class="type">int</span> n) <span class="comment">// 返回n的二进制前导0的个数，当n为0时，结果未定义</span></span><br><span class="line"><span class="type">int</span> __builtin_ctz(<span class="type">int</span> n) <span class="comment">// 返回n的二进制后导0的个数</span></span><br><span class="line"><span class="type">int</span> __builtin_popcountll(<span class="type">long</span> <span class="type">long</span> n) <span class="comment">// 支持long long</span></span><br><span class="line"></span><br><span class="line">n &amp; (n - <span class="number">1</span>) <span class="comment">// 判断n是否为2的次幂，是0否1</span></span><br><span class="line">n &amp; -n; <span class="comment">// lowbit 最低位1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bit_floor</span><span class="params">(n)</span> -&gt; 1 &lt;&lt; __<span class="title">lg</span><span class="params">(n)</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bit_ceil</span><span class="params">(n)</span> -&gt; 2 &lt;&lt; __<span class="title">lg</span><span class="params">(n - <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bit_width</span><span class="params">(n)</span> -&gt; __<span class="title">lg</span><span class="params">(n)</span> + 1</span></span><br></pre></td></tr></table></figure><p><code>&lt;bitset&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">bitset&lt;1024&gt; bs;  <span class="comment">// bitset 存储 1024 个 bit</span></span><br><span class="line"><span class="built_in">bitset</span>(); <span class="comment">// 每一位都是 0</span></span><br><span class="line"><span class="built_in">bitset</span>(<span class="type">unsigned</span> <span class="type">long</span> val); <span class="comment">// 设为 val 的二进制形式</span></span><br><span class="line"><span class="built_in">bitset</span>(<span class="type">const</span> string&amp; str); <span class="comment">// 设为 01 串 str</span></span><br><span class="line"><span class="comment">// 支持操作 [] == != &amp; &amp;= | |= ^ ^= &lt;&lt; &lt;&lt;= &gt;&gt; &gt;&gt;=</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">()</span> <span class="comment">// 返回 true 的数量。</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span>  <span class="comment">//  返回 bitset 的大小。</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">any</span><span class="params">()</span>  <span class="comment">// 若存在某一位是 true 则返回 true，否则返回 false。</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">none</span><span class="params">()</span> <span class="comment">// 若所有位都是 false 则返回 true，否则返回 false。</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">all</span><span class="params">()</span>  <span class="comment">// 若所有位都是 true 则返回 true，否则返回 false。</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">()</span> <span class="comment">// 将整个 bitset 设置成 true。</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set</span><span class="params">(<span class="type">int</span> pos, <span class="type">bool</span> val = <span class="literal">true</span>)</span> <span class="comment">// 将某一位设置成 true/false。</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">()</span> <span class="comment">// 将整个 bitset 设置成 false。</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(<span class="type">int</span> pos)</span> <span class="comment">// 将某一位设置成 false。相当于 set(pos, false)。</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">flip</span><span class="params">()</span> <span class="comment">// 翻转每一位。</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">flip</span><span class="params">(<span class="type">int</span> pos)</span> <span class="comment">// 翻转某一位。</span></span></span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">()</span> <span class="comment">// 返回转换成的字符串表达。</span></span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">to_ulong</span><span class="params">()</span> <span class="comment">// 返回转换成的 unsigned long 表达（long 在 NT 及 32 位 POSIX 系统下与 int 一样，在 64 位 POSIX 下与 long long 一样）。</span></span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">to_ullong</span><span class="params">()</span> <span class="comment">//（C++11 起）返回转换成的 unsigned long long 表达。</span></span></span><br></pre></td></tr></table></figure><p>二进制集合</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span> &lt;&lt; n); ++s)</span><br><span class="line"><span class="comment">// 降序遍历 m 的非空子集</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> s = m; s; s = (s - <span class="number">1</span>) &amp; m)</span><br><span class="line"><span class="comment">// s 是 m 的一个非空子集</span></span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>$O(\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll x, ll n)</span> </span>&#123;</span><br><span class="line">    ll s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; n; n &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            s = s * x;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><h4 id="欧几里得算法-辗转相除法"><a href="#欧几里得算法-辗转相除法" class="headerlink" title="欧几里得算法&#x2F;辗转相除法"></a>欧几里得算法&#x2F;辗转相除法</h4><p>$O(\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a; &#125;</span><br><span class="line"><span class="comment">// c++14 : __gcd(a, b)</span></span><br><span class="line"><span class="comment">// c++17 : std::gcd(a, b) &lt;numeric&gt;</span></span><br></pre></td></tr></table></figure><h4 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h4><p>求 $ax+by&#x3D;\gcd(a,b)$ 的一组特解</p><p>$O(\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">extgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> d;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>, d = a;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        d = <span class="built_in">extgcd</span>(b, a % b, y, x); <span class="comment">// x&#x27;  y&#x27;</span></span><br><span class="line">        y -= a / b * x;             <span class="comment">// y = y - a / b * x = x&#x27; - a / b * y&#x27; = y&#x27;&#x27; - a / b * y&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h4><p>设 $a,b$ 是不全为零的整数，则存在整数 $x,y$, 使得 $ax+by&#x3D;\gcd(a,b)$</p><h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>若 $\gcd(a, m) &#x3D; 1，则 a^{\varphi(m)} \equiv 1 \pmod{m}$</p><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>若 $p$ 为素数，$\gcd(a, p) &#x3D; 1$ ，则 $a^{p - 1} \equiv 1 \pmod{p}$</p><p>另一个形式：对于任意整数 $a$，有 $a^p \equiv a \pmod{p}$</p><h3 id="二元丢番图方程"><a href="#二元丢番图方程" class="headerlink" title="二元丢番图方程"></a>二元丢番图方程</h3><p>$ax + by &#x3D; c$ 只有无解和无穷多解两种情况</p><p>根据裴蜀定理，当 $\gcd(a,b)\mid c$ 时 $a\left(\dfrac{\gcd(a,b)}{c}x\right)+b\left(\dfrac{\gcd(a,b)}{c}x\right)&#x3D;ax’+by’&#x3D;\gcd(a,b)$ 有解，即 $ax + by &#x3D; c$ 有解，否则无解</p><p>使用扩展欧几里得算法解 $ax’+by’&#x3D;\gcd(a,b)$ 得一组解 $(x’,y’)$</p><p>则原方程得一组特解为 $x_0&#x3D;\dfrac{c}{\gcd(a,b)}x’,\ y_0&#x3D;\dfrac{c}{\gcd(a,b)}y’$</p><p>通解为 $x&#x3D;x_0+\dfrac{b}{\gcd(a,b)}n ,\ y&#x3D;y_0−\dfrac{a}{\gcd(a,b)}n$</p><p>$O(\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ax + by = c</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">liEu</span><span class="params">(ll a, ll b, ll c, ll &amp;x, ll &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">extgcd</span>(a, b, x, y);</span><br><span class="line">    <span class="keyword">if</span> (c % d != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = x * c / d;</span><br><span class="line">    y = y * c / d;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x的最小和最大值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">minmax</span><span class="params">(ll a, ll b, ll c, ll n)</span> </span>&#123;</span><br><span class="line">    ll x0, y0, gcd = <span class="built_in">extgcd</span>(a, b, x0, y0);</span><br><span class="line">    <span class="keyword">if</span> (c &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">0</span> &amp;&amp; gcd == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; n &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gcd == <span class="number">0</span> || c % gcd != <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// c &gt; 0, gcd != 0, c % gcd == 0</span></span><br><span class="line">    x0 *= c / gcd;</span><br><span class="line">    y0 *= c / gcd;</span><br><span class="line">    ll k_min = <span class="built_in">ceil</span>(<span class="built_in">double</span>(-x0) / (b / gcd));</span><br><span class="line">    ll k_max = <span class="built_in">floor</span>(<span class="built_in">double</span>(y0) / (a / gcd));</span><br><span class="line">    <span class="keyword">if</span> (k_min &gt; k_max) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll x_min = <span class="number">1e8</span>, x_max = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll k = k_min; k &lt;= k_max; k++) &#123;</span><br><span class="line">        ll x_k = x0 + k * (b / gcd);</span><br><span class="line">        ll y_k = y0 - k * (a / gcd);</span><br><span class="line">        <span class="keyword">if</span> (x_k + y_k &lt;= n) &#123;</span><br><span class="line">            x_min = <span class="built_in">min</span>(x_min, x_k);</span><br><span class="line">            x_max = <span class="built_in">max</span>(x_max, x_k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; x_min &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; x_max &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h3><p>如果一个线性同余方程 $ax \equiv 1 \pmod b$ ，则 $x$ 称为 $a \bmod b$ 的逆元，记作 $a^{-1}$</p><h4 id="扩展欧几里得法"><a href="#扩展欧几里得法" class="headerlink" title="扩展欧几里得法"></a>扩展欧几里得法</h4><p>$ax \equiv 1 \pmod b \iff ax+by&#x3D;1$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="built_in">extgcd</span>(a, b, x, y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速幂法"><a href="#快速幂法" class="headerlink" title="快速幂法"></a>快速幂法</h4><p>$ax \equiv 1 \pmod b \iff ax\equiv a^{b-1} \pmod b \iff x \equiv a^{b-2} \pmod b$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">inv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">pow_mod</span>(a, b - <span class="number">2</span>, b); &#125;</span><br></pre></td></tr></table></figure><h3 id="线性同余方程"><a href="#线性同余方程" class="headerlink" title="线性同余方程"></a>线性同余方程</h3><p>$ax \equiv b \pmod n$</p><h4 id="逆元法"><a href="#逆元法" class="headerlink" title="逆元法"></a>逆元法</h4><p>$ax \equiv b \pmod n\iff x \equiv ba^{-1} \pmod n$</p><h4 id="扩展欧几里得法-1"><a href="#扩展欧几里得法-1" class="headerlink" title="扩展欧几里得法"></a>扩展欧几里得法</h4><p>$ax \equiv b \pmod n \iff ax+ny&#x3D;b$</p><h3 id="线性同余方程组：中国剩余定理"><a href="#线性同余方程组：中国剩余定理" class="headerlink" title="线性同余方程组：中国剩余定理"></a>线性同余方程组：中国剩余定理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">CRT</span><span class="params">(<span class="type">int</span> k, LL* a, LL* r)</span> </span>&#123;</span><br><span class="line">  LL n = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) n = n * r[i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">    LL m = n / r[i], b, y;</span><br><span class="line">    <span class="built_in">exgcd</span>(m, r[i], b, y);  <span class="comment">// b * m mod r[i] = 1</span></span><br><span class="line">    ans = (ans + a[i] * m * b % n) % n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (ans % n + n) % n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><h4 id="分解质因数-唯一分解定理"><a href="#分解质因数-唯一分解定理" class="headerlink" title="分解质因数&#x2F;唯一分解定理"></a>分解质因数&#x2F;唯一分解定理</h4><p>$O(\sqrt{n})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getPrimeFactor</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">                n /= i, cnt++;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>)</span><br><span class="line">        res.<span class="built_in">push_back</span>(n);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="素数测试"><a href="#素数测试" class="headerlink" title="素数测试"></a>素数测试</h4><p>$O(\sqrt{n})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Prime</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++)</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$O(k\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">millerRabin</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k = <span class="number">50</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span> || n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> u = n - <span class="number">1</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (u % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        u /= <span class="number">2</span>, ++t;</span><br><span class="line">    <span class="comment">// test_time 为测试次数，建议设为不小于 8</span></span><br><span class="line">    <span class="comment">// 的整数以保证正确率，但也不宜过大，否则会影响效率</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="built_in">rand</span>() % (n - <span class="number">2</span>) + <span class="number">2</span>, v = <span class="built_in">qpow</span>(a, u, n);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> s;</span><br><span class="line">        <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; t; ++s) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v == n - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 得到平凡平方根 n-1，通过此轮测试</span></span><br><span class="line">            v = (<span class="type">long</span> <span class="type">long</span>)v * v % n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果找到了非平凡平方根，则会由于无法提前 break; 而运行到 s == t</span></span><br><span class="line">        <span class="comment">// 如果 Fermat 素性测试无法通过，则一直运行到 s == t 前 v 都不会等于 -1</span></span><br><span class="line">        <span class="keyword">if</span> (s == t)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h4><p>$O(n\log\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; isPrime, primes;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eratosthenes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    isPrime.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    primes.<span class="built_in">clear</span>();</span><br><span class="line">    isPrime[<span class="number">0</span>] = isPrime[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i]) &#123;</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span> * i; j &lt;= n; j += i)</span><br><span class="line">                isPrime[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h4><p>$O(n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; minp, primes;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    minp.<span class="built_in">assign</span>(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    primes.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!minp[i])</span><br><span class="line">            minp[i] = i, primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; i * primes[j] &lt;= n; j++) &#123;</span><br><span class="line">            minp[i * primes[j]] = primes[j];</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h3><p>如果有 $\gcd(a, b) &#x3D; 1$ , 那么 $\varphi(a \times b) &#x3D; \varphi(a) \times \varphi(b)$ </p><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>欧拉函数，即 $\varphi(n)$，表示的是小于等于 $n$ 和 $n$ 互质的数的个数</p><p>当 $n$ 是质数的时候，显然有 $\varphi(n) &#x3D; n - 1$</p><p>$\varphi(n)&#x3D;\sum_{i&#x3D;1}^n[\gcd(i,n)&#x3D;1]&#x3D;n\times \prod_{i&#x3D;1}^{k}$</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li><p>欧拉函数是积性函数</p></li><li><p>$n &#x3D; \sum_{d \mid n}{\varphi(d)}$</p></li><li><p>若 $n &#x3D; p^k$ , 其中 $p$ 是质数，那么 $\varphi(n) &#x3D; p^k - p^{k - 1}$ （根据定义可知）</p></li><li><p>由唯一分解定理，设 $n &#x3D; \prod_{i&#x3D;1}^{s}p_i^{k_i}$ , 其中 $p_i$ 是质数，有 $\varphi(n) &#x3D; n \times \prod_{i &#x3D; 1}^s{\dfrac{p_i - 1}{p_i}}$</p></li></ul><h4 id="求一个数欧拉函数的值"><a href="#求一个数欧拉函数的值" class="headerlink" title="求一个数欧拉函数的值"></a>求一个数欧拉函数的值</h4><p>$O(\sqrt{n})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">euler_phi</span><span class="params">(<span class="type">int</span> n)</span> </span></span><br><span class="line"><span class="function">  <span class="type">int</span> ans </span>= n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i&lt;= n; i++)</span><br><span class="line">    <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">      ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">while</span> (n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1</span>) ans = ans / n * (n - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求多个数的欧拉函数值"><a href="#求多个数的欧拉函数值" class="headerlink" title="求多个数的欧拉函数值"></a>求多个数的欧拉函数值</h4><p>$O(n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_phi</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(isPrime, <span class="literal">true</span>, <span class="built_in">sizeof</span>(isPrime));</span><br><span class="line">    isPrime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime[i]) &#123;</span><br><span class="line">            prime[cnt++] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; <span class="built_in">ll</span>(i) * prime[j] &lt;= n; j++) &#123;</span><br><span class="line">            isPrime[i * prime[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                phi[i * prime[j]] = phi[i] * phi[prime[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数论分块"><a href="#数论分块" class="headerlink" title="数论分块"></a>数论分块</h3><p>$\sum_{i&#x3D;1}^n\sum_{d|i} f(d)&#x3D;\sum_{i&#x3D;1}^n f(i)\left\lfloor\dfrac ni\right\rfloor$</p><p>快速计算 $\sum_{i&#x3D;1}^n f(i)g(\left\lfloor\dfrac ni\right\rfloor)$ , 其中 $f(i)$ 可以预处理前缀和 $s(i)$</p><p>$O(\sqrt{n})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> f[N], g[N];</span><br><span class="line">ll s[N];</span><br><span class="line"><span class="function">ll <span class="title">H</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">        ll d = n / l;</span><br><span class="line">        r = n / d;</span><br><span class="line">        <span class="comment">// res += (r - l + 1) * d;</span></span><br><span class="line">        res += (s[r] - s[l - <span class="number">1</span>]) * g[d];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模意义下的运算"><a href="#模意义下的运算" class="headerlink" title="模意义下的运算"></a>模意义下的运算</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">pow</span><span class="params">(T a, <span class="type">long</span> <span class="type">long</span> b)</span> </span>&#123;</span><br><span class="line">    T s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; a = a * a, b &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            s = s * a;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Z</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">    <span class="built_in">Z</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Z</span>(<span class="type">long</span> <span class="type">long</span> x) : <span class="built_in">x</span>(<span class="built_in">Norm</span>(x)) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">long</span> <span class="type">long</span> <span class="title">Norm</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123; <span class="keyword">return</span> x %= mod, x &lt; <span class="number">0</span> ? x + mod : x; &#125;</span><br><span class="line">    <span class="function">Z <span class="title">inv</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">pow</span>(*<span class="keyword">this</span>, mod - <span class="number">2</span>); &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>+(<span class="type">const</span> Z &amp;a, <span class="type">const</span> Z &amp;b) &#123; <span class="keyword">return</span> <span class="built_in">Z</span>(a.x + b.x); &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>-(<span class="type">const</span> Z &amp;a, <span class="type">const</span> Z &amp;b) &#123; <span class="keyword">return</span> <span class="built_in">Z</span>(a.x - b.x); &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>*(<span class="type">const</span> Z &amp;a, <span class="type">const</span> Z &amp;b) &#123; <span class="keyword">return</span> <span class="built_in">Z</span>(a.x * b.x); &#125;</span><br><span class="line">    <span class="keyword">friend</span> Z <span class="keyword">operator</span>/(<span class="type">const</span> Z &amp;a, <span class="type">const</span> Z &amp;b) &#123; <span class="keyword">return</span> a * b.<span class="built_in">inv</span>(); &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os, <span class="type">const</span> Z &amp;z) &#123; <span class="keyword">return</span> os &lt;&lt; z.x; &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;os, Z &amp;z) &#123; <span class="keyword">return</span> os &gt;&gt; z.x, z.x = <span class="built_in">Norm</span>(z.x), os; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="组合数学"><a href="#组合数学" class="headerlink" title="组合数学"></a>组合数学</h2><h3 id="排列数和组合数"><a href="#排列数和组合数" class="headerlink" title="排列数和组合数"></a>排列数和组合数</h3><p>$O(n)$ 预处理，$O(1)$ 查询</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Binom</span> &#123;</span><br><span class="line">    vector&lt;Z&gt; fac;</span><br><span class="line">    <span class="built_in">Binom</span>(<span class="type">int</span> n = <span class="number">0</span>) : <span class="built_in">fac</span>(n + <span class="number">1</span>) &#123;</span><br><span class="line">        fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Z <span class="title">C</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123; <span class="keyword">return</span> (m &lt; n || n &lt; <span class="number">0</span>) ? <span class="number">0</span> : fac[m] / fac[n] / fac[m - n]; &#125;</span><br><span class="line">    <span class="function">Z <span class="title">P</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123; <span class="keyword">return</span> (m &lt; n || n &lt; <span class="number">0</span>) ? <span class="number">0</span> : fac[m] / fac[m - n]; &#125;</span><br><span class="line">&#125; binom;</span><br></pre></td></tr></table></figure><h3 id="卢卡斯定理"><a href="#卢卡斯定理" class="headerlink" title="卢卡斯定理"></a>卢卡斯定理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Z <span class="title">lucas</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; p &amp;&amp; m &lt; p)</span><br><span class="line">        <span class="keyword">return</span> binom.<span class="built_in">C</span>(n, m);</span><br><span class="line">    <span class="keyword">return</span> binom.<span class="built_in">C</span>(n % p, m % p) * <span class="built_in">lucas</span>(n / p, m / p, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><h3 id="向量与矩阵"><a href="#向量与矩阵" class="headerlink" title="向量与矩阵"></a>向量与矩阵</h3><h4 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h4><p>$k^3 O(\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">using</span> Matrix = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;;</span><br><span class="line">Matrix <span class="keyword">operator</span>*(<span class="type">const</span> Matrix &amp;A, <span class="type">const</span> Matrix &amp;B) &#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">C</span><span class="params">(A.size(), vector&lt;<span class="type">int</span>&gt;(B[<span class="number">0</span>].size()))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; B.<span class="built_in">size</span>(); k++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; B[<span class="number">0</span>].<span class="built_in">size</span>(); j++)</span><br><span class="line">                C[i][j] = (C[i][j] + A[i][k] * B[k][j]);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Matrix <span class="title">pow</span><span class="params">(Matrix &amp;A, ll n)</span> </span>&#123;</span><br><span class="line">    <span class="function">Matrix <span class="title">B</span><span class="params">(A.size(), vector&lt;<span class="type">int</span>&gt;(A[<span class="number">0</span>].size()))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; B.<span class="built_in">size</span>(); i++)</span><br><span class="line">        B[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; n; n &gt;&gt;= <span class="number">1</span>, A = A * A)</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            B = B * A;</span><br><span class="line">    <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h4><p>$$\begin{bmatrix}<br>\cos\theta &amp; -\sin\theta\newline<br> \sin\theta &amp; \cos\theta<br>\end{bmatrix}$$</p><h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><p>$O(n^3)$</p><p>返回 0 无解，返回 1 有解，解为 $x_i &#x3D; a[i][n]$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a:增广矩阵 n*(n+1)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gauss</span><span class="params">(vector&lt;vector&lt;<span class="type">double</span>&gt;&gt; &amp;a, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 枚举列</span></span><br><span class="line">        <span class="type">int</span> r = i;                <span class="comment">// 该列最大数所在的行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(a[j][i]) &gt; <span class="built_in">abs</span>(a[r][i]))</span><br><span class="line">                r = j;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(a[r][i]) &lt; eps)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">// 列最大数为0，无解</span></span><br><span class="line">        <span class="built_in">swap</span>(a[i], a[r]); <span class="comment">// 把这一行移上来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt;= i; j--) a[i][j] /= a[i][i];     <span class="comment">// 这一行的主元系数变为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="comment">// 消去主元所在列的其他行的主元</span></span><br><span class="line">            <span class="keyword">if</span> (j != i &amp;&amp; <span class="built_in">abs</span>(a[j][i]) &gt; eps)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = n; k &gt;= i; k--)</span><br><span class="line">                    a[j][k] -= a[i][k] * a[j][i] / a[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">gauss</span>(a, n)) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;No Solution&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, a[i][n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h2><h3 id="mex函数"><a href="#mex函数" class="headerlink" title="mex函数"></a>mex函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">mex</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">s</span><span class="params">(v.begin(), v.end())</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;; i++)</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">find</span>(i) == s.<span class="built_in">end</span>())</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h3><p>$\operatorname{SG}(x)&#x3D;0\iff x$ 对应的局面为必败态</p><p>$\operatorname{SG}(x)&gt;0\iff x$ 对应的局面为必胜态</p><p>线性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getSG</span><span class="params">(<span class="type">int</span> n, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;f)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">SG</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; f[j] &lt;= i &amp;&amp; j &lt; f.<span class="built_in">size</span>(); j++)</span><br><span class="line">            S.<span class="built_in">push_back</span>(SG[i - f[j]]);</span><br><span class="line">        SG[i] = <span class="built_in">mex</span>(S);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> SG;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dfs</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v : G[u])</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v : G[u])</span><br><span class="line">        S.<span class="built_in">push_back</span>(SG[v]);</span><br><span class="line">    SG[u] = <span class="built_in">mex</span>(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h2><h3 id="自适应辛普森积分"><a href="#自适应辛普森积分" class="headerlink" title="自适应辛普森积分"></a>自适应辛普森积分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">simpson</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> (r - l) * (<span class="built_in">f</span>(l) + <span class="number">4</span> * <span class="built_in">f</span>(mid) + <span class="built_in">f</span>(r)) / <span class="number">6</span>;  <span class="comment">// 辛普森公式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">asr</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r, <span class="type">double</span> eps, <span class="type">double</span> ans, <span class="type">int</span> step)</span> </span>&#123;</span><br><span class="line">  <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">  <span class="type">double</span> fl = <span class="built_in">simpson</span>(l, mid), fr = <span class="built_in">simpson</span>(mid, r);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">abs</span>(fl + fr - ans) &lt;= <span class="number">15</span> * eps &amp;&amp; step &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> fl + fr + (fl + fr - ans) / <span class="number">15</span>;  <span class="comment">// 足够相似的话就直接返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">asr</span>(l, mid, eps / <span class="number">2</span>, fl, step - <span class="number">1</span>) +</span><br><span class="line">         <span class="built_in">asr</span>(mid, r, eps / <span class="number">2</span>, fr, step - <span class="number">1</span>);  <span class="comment">// 否则分割成两段递归求解</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r, <span class="type">double</span> eps)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">asr</span>(l, r, eps, <span class="built_in">simpson</span>(l, r), <span class="number">12</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h2><h3 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Poly = vector&lt;<span class="type">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> Complex = complex&lt;<span class="type">double</span>&gt;;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">0.49</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="type">int</span> rev[<span class="number">1</span> &lt;&lt; <span class="number">22</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(Complex a[], <span class="type">int</span> n, <span class="type">int</span> inv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; __lg(n &gt;&gt; <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i &lt; rev[i])</span><br><span class="line">            <span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="function">Complex <span class="title">wn</span><span class="params">(cos(<span class="number">2</span> * PI / i), inv * sin(<span class="number">2</span> * PI / i))</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j += i) &#123;</span><br><span class="line">            <span class="function">Complex <span class="title">w0</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j; k &lt; j + i / <span class="number">2</span>; ++k, w0 *= wn) &#123;</span><br><span class="line">                Complex x = a[k], y = w0 * a[k + i / <span class="number">2</span>];</span><br><span class="line">                a[k] = x + y;</span><br><span class="line">                a[k + i / <span class="number">2</span>] = x - y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inv == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            a[i] /= n;</span><br><span class="line">&#125;</span><br><span class="line">Poly <span class="keyword">operator</span>*(Poly a, Poly b) &#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="function">vector&lt;Complex&gt; <span class="title">c</span><span class="params">(<span class="number">2</span> &lt;&lt; __lg(n - <span class="number">1</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++)</span><br><span class="line">        c[i].<span class="built_in">real</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++)</span><br><span class="line">        c[i].<span class="built_in">imag</span>(b[i]);</span><br><span class="line">    <span class="built_in">FFT</span>(c.<span class="built_in">data</span>(), c.<span class="built_in">size</span>(), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; c.<span class="built_in">size</span>(); i++)</span><br><span class="line">        c[i] = c[i] * c[i];</span><br><span class="line">    <span class="built_in">FFT</span>(c.<span class="built_in">data</span>(), c.<span class="built_in">size</span>(), <span class="number">-1</span>);</span><br><span class="line">    <span class="function">Poly <span class="title">s</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        s[i] = (<span class="type">int</span>)(c[i].<span class="built_in">imag</span>() / <span class="number">2</span> + eps);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="Tire-字典树"><a href="#Tire-字典树" class="headerlink" title="Tire&#x2F;字典树"></a>Tire&#x2F;字典树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Tire</span> &#123;</span><br><span class="line">    <span class="type">int</span> nxt[<span class="number">100000</span>][<span class="number">26</span>], cnt;</span><br><span class="line">    <span class="type">bool</span> exist[<span class="number">100000</span>]; <span class="comment">// 该结点结尾的字符串是否存在</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span> </span>&#123; <span class="comment">// 插入字符串</span></span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            c -= <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!nxt[p][c])</span><br><span class="line">                nxt[p][c] = ++cnt; <span class="comment">// 如果没有，就添加结点</span></span><br><span class="line">            p = nxt[p][c];</span><br><span class="line">        &#125;</span><br><span class="line">        exist[p] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(string s)</span> </span>&#123; <span class="comment">// 查找字符串</span></span><br><span class="line">        <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s) &#123;</span><br><span class="line">            c -= <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!nxt[p][c])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = nxt[p][c];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exist[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="next数组"><a href="#next数组" class="headerlink" title="next数组"></a>next数组</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pi[i]: 子串 s[0, i-1] 最长的相等的真前缀与真后缀的长度</span></span><br><span class="line"><span class="comment">// pi[i]: s[0, pi[i]-1] == s[i-pi[i], i-1]</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prefix</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = pi[i];</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != s[j])</span><br><span class="line">            j = pi[j];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[j])</span><br><span class="line">            j++;</span><br><span class="line">        pi[i + <span class="number">1</span>] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="单调队列优化"><a href="#单调队列优化" class="headerlink" title="单调队列优化"></a>单调队列优化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, M = <span class="number">20010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N], s[N];</span><br><span class="line"><span class="type">int</span> f[<span class="number">2</span>][M];</span><br><span class="line"><span class="type">int</span> q[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; v[i]; ++ r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = r; j &lt;= m; j += v[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; j - q[hh] &gt; s[i] * v[i]) hh ++ ;</span><br><span class="line">                <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][q[tt]] + (j - q[tt]) / v[i] * w[i] &lt;= f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][j]) -- tt;</span><br><span class="line">                q[ ++ tt] = j;</span><br><span class="line">                f[i &amp; <span class="number">1</span>][j] = f[(i - <span class="number">1</span>) &amp; <span class="number">1</span>][q[hh]] + (j - q[hh]) / v[i] * w[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n &amp; <span class="number">1</span>][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024天梯赛选拔赛（一）</title>
      <link href="/2023/12/24/2024%E5%A4%A9%E6%A2%AF%E8%B5%9B%E9%80%89%E6%8B%94%E8%B5%9B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/12/24/2024%E5%A4%A9%E6%A2%AF%E8%B5%9B%E9%80%89%E6%8B%94%E8%B5%9B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="L1-1-2018我们要赢"><a href="#L1-1-2018我们要赢" class="headerlink" title="L1-1 2018我们要赢"></a>L1-1 2018我们要赢</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;2018</span></span><br><span class="line"><span class="string">wo3 men2 yao4 ying2 !&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="L1-2-心理阴影面积"><a href="#L1-2-心理阴影面积" class="headerlink" title="L1-2 心理阴影面积"></a>L1-2 心理阴影面积</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    cout &lt;&lt; (<span class="number">100</span> * <span class="number">100</span> / <span class="number">2</span> - x * y / <span class="number">2</span> - (<span class="number">100</span> - x) * y - (<span class="number">100</span> - x) * (<span class="number">100</span> - y) / <span class="number">2</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L1-3-判断素数"><a href="#L1-3-判断素数" class="headerlink" title="L1-3 判断素数"></a>L1-3 判断素数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">2</span>; i * i &lt;= x; i++)</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        cout &lt;&lt; (<span class="built_in">isPrime</span>(x) ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L1-4-调和平均"><a href="#L1-4-调和平均" class="headerlink" title="L1-4 调和平均"></a>L1-4 调和平均</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">double</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">double</span> a;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        x += <span class="number">1.0</span> / a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, <span class="number">1.0</span> / (x / n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L1-5-情人节"><a href="#L1-5-情人节" class="headerlink" title="L1-5 情人节"></a>L1-5 情人节</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;string&gt; v;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; s, s != <span class="string">&quot;.&quot;</span>) &#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v.<span class="built_in">size</span>() &gt;= <span class="number">14</span>) &#123;</span><br><span class="line">        cout &lt;&lt; v[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; and &quot;</span> &lt;&lt; v[<span class="number">13</span>] &lt;&lt; <span class="string">&quot; are inviting you to dinner...\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        cout &lt;&lt; v[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; is the only one for you...\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Momo... No one is for you ...\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L1-6-复制粘贴"><a href="#L1-6-复制粘贴" class="headerlink" title="L1-6 复制粘贴"></a>L1-6 复制粘贴</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        string ls, rs;</span><br><span class="line">        cin &gt;&gt; ls &gt;&gt; rs;</span><br><span class="line">        string cx = s.<span class="built_in">substr</span>(l - <span class="number">1</span>, r - l + <span class="number">1</span>);</span><br><span class="line">        s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>() + l - <span class="number">1</span>, s.<span class="built_in">begin</span>() + r - <span class="number">1</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">auto</span> pos = s.<span class="built_in">find</span>(ls + rs);</span><br><span class="line">        <span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;</span><br><span class="line">            s += cx;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s.<span class="built_in">insert</span>(pos + ls.<span class="built_in">size</span>(), cx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L1-7-古风排版"><a href="#L1-7-古风排版" class="headerlink" title="L1-7 古风排版"></a>L1-7 古风排版</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin.<span class="built_in">get</span>();</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s);</span><br><span class="line">    <span class="keyword">while</span> (s.<span class="built_in">size</span>() % n != <span class="number">0</span>)</span><br><span class="line">        s.<span class="built_in">push_back</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">ss</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">        ss[i % n] += s[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(ss[i].<span class="built_in">begin</span>(), ss[i].<span class="built_in">end</span>()); <span class="comment">// 逆转所有元素的位置</span></span><br><span class="line">        cout &lt;&lt; ss[i] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L1-8-分寝室"><a href="#L1-8-分寝室" class="headerlink" title="L1-8 分寝室"></a>L1-8 分寝室</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分解n的所有因数(不包括1)</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            s.<span class="built_in">insert</span>(i), s.<span class="built_in">insert</span>(n / i);</span><br><span class="line">    s.<span class="built_in">insert</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, n1, n0;</span><br><span class="line">    cin &gt;&gt; n0 &gt;&gt; n1 &gt;&gt; n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a1 = <span class="built_in">get</span>(n1), a0 = <span class="built_in">get</span>(n0); <span class="comment">// a1:每个男寝可分配的人数，a0:每个女寝可分配的人数</span></span><br><span class="line">    <span class="type">int</span> mn = <span class="number">1e9</span>;</span><br><span class="line">    pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ans = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : a0) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y : a1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n0 / x + n1 / y == n) &#123; <span class="comment">// n0/x女寝宿舍数 n1/y男寝宿舍数</span></span><br><span class="line">                <span class="keyword">if</span> (mn &gt; <span class="built_in">abs</span>(x - y)) &#123;</span><br><span class="line">                    mn = <span class="built_in">abs</span>(x - y);</span><br><span class="line">                    ans = &#123;n0 / x, n1 / y&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans == pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No Solution&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; ans.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ans.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L2-1-插松枝"><a href="#L2-1-插松枝" class="headerlink" title="L2-1 插松枝"></a>L2-1 插松枝</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> &amp;x : a)</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; box;</span><br><span class="line">    <span class="keyword">while</span> (!a.<span class="built_in">empty</span>() || !box.<span class="built_in">empty</span>()) &#123; <span class="comment">// 盒子和推送器都不为空时，继续做松枝</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; tree;</span><br><span class="line">        <span class="keyword">while</span> (tree.<span class="built_in">size</span>() &lt; k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tree.<span class="built_in">empty</span>()) &#123;     <span class="comment">// 松枝干为空</span></span><br><span class="line">                <span class="keyword">if</span> (!box.<span class="built_in">empty</span>()) &#123; <span class="comment">// 从盒子里取</span></span><br><span class="line">                    tree.<span class="built_in">push_back</span>(box.<span class="built_in">top</span>());</span><br><span class="line">                    box.<span class="built_in">pop</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;           <span class="comment">// 从推送器取</span></span><br><span class="line">                    <span class="keyword">if</span> (a.<span class="built_in">empty</span>()) <span class="comment">// 小盒子中最上面的松针不满足要求，但推送器上已经没有松针了</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    tree.<span class="built_in">push_back</span>(a.<span class="built_in">back</span>());</span><br><span class="line">                    a.<span class="built_in">pop_back</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;                                            <span class="comment">// 松枝干非空</span></span><br><span class="line">                <span class="keyword">if</span> (!box.<span class="built_in">empty</span>() &amp;&amp; box.<span class="built_in">top</span>() &lt;= tree.<span class="built_in">back</span>()) &#123; <span class="comment">// 从盒子里取</span></span><br><span class="line">                    tree.<span class="built_in">push_back</span>(box.<span class="built_in">top</span>());</span><br><span class="line">                    box.<span class="built_in">pop</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;           <span class="comment">// 从推送器取</span></span><br><span class="line">                    <span class="keyword">if</span> (a.<span class="built_in">empty</span>()) <span class="comment">// 小盒子中最上面的松针不满足要求，但推送器上已经没有松针了</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="type">int</span> x = a.<span class="built_in">back</span>();</span><br><span class="line">                    <span class="keyword">if</span> (x &lt;= tree.<span class="built_in">back</span>()) &#123; <span class="comment">// 推送器满足要求</span></span><br><span class="line">                        tree.<span class="built_in">push_back</span>(x);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;                   <span class="comment">// 推送器不满足要求</span></span><br><span class="line">                        <span class="keyword">if</span> (box.<span class="built_in">size</span>() &gt;= m) &#123; <span class="comment">// 小盒子已经满了，但推送器上取到的松针仍然不满足要求。</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果推送器上拿到的仍然不满足要求，就把拿到的这片堆放到小盒子里，继续去推送器上取下一片。</span></span><br><span class="line">                            box.<span class="built_in">push</span>(x);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    a.<span class="built_in">pop_back</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 手中的松枝干上已经插满了松针，将之放到成品篮里，开始下一根松枝的制作。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tree.<span class="built_in">size</span>(); i++)</span><br><span class="line">            cout &lt;&lt; tree[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == tree.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L2-2-列车调度"><a href="#L2-2-列车调度" class="headerlink" title="L2-2 列车调度"></a>L2-2 列车调度</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> &amp;x : a)</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; t&#123;a[<span class="number">0</span>]&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> pos = <span class="built_in">lower_bound</span>(t.<span class="built_in">begin</span>(), t.<span class="built_in">end</span>(), a[i]);</span><br><span class="line">        <span class="keyword">if</span> (pos == t.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            t.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            *pos = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; t.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L2-3-愿天下有情人都是失散多年的兄妹"><a href="#L2-3-愿天下有情人都是失散多年的兄妹" class="headerlink" title="L2-3 愿天下有情人都是失散多年的兄妹"></a>L2-3 愿天下有情人都是失散多年的兄妹</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">int</span> f = <span class="number">-1</span>, m = <span class="number">-1</span>;</span><br><span class="line">&#125; p[<span class="number">100010</span>];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> dep)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep &gt; <span class="number">5</span> || u == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    mp[u]++;</span><br><span class="line">    <span class="keyword">if</span> (mp[u] &gt;= <span class="number">2</span>)</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(p[u].f, dep + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(p[u].m, dep + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        cin &gt;&gt; p[x].sex &gt;&gt; p[x].f &gt;&gt; p[x].m;</span><br><span class="line">        <span class="keyword">if</span> (p[x].f != <span class="number">-1</span>)</span><br><span class="line">            p[p[x].f].sex = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (p[x].m != <span class="number">-1</span>)</span><br><span class="line">            p[p[x].m].sex = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (p[x].sex == p[y].sex) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Never Mind\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            mp.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="built_in">dfs</span>(x, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(y, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L2-4-网红点打卡攻略"><a href="#L2-4-网红点打卡攻略" class="headerlink" title="L2-4 网红点打卡攻略"></a>L2-4 网红点打卡攻略</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">G</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> _ = <span class="number">0</span>; _ &lt; m; _++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        G[u][v] = G[v][u] = w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ans = &#123;<span class="number">0</span>, <span class="number">1e9</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> id = <span class="number">1</span>; id &lt;= T; id++) &#123;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            a.<span class="built_in">push_back</span>(x);</span><br><span class="line">            s.<span class="built_in">insert</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        a.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!G[a[i - <span class="number">1</span>]][a[i]])</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">            sum += G[a[i - <span class="number">1</span>]][a[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ok &amp;&amp; s.<span class="built_in">size</span>() == n &amp;&amp; k == n) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (ans.second &gt; sum) &#123;</span><br><span class="line">                ans = &#123;id, sum&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; ans.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ans.second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="L3-1-特殊堆栈"><a href="#L3-1-特殊堆栈" class="headerlink" title="L3-1 特殊堆栈"></a>L3-1 特殊堆栈</h1><p>树状数组维护栈中每个数字的出现次数，树状数组上二分查找第k小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tr;</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n), <span class="built_in">tr</span>(n + <span class="number">1</span>, <span class="number">0</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt;= n; i += (i &amp; -i))</span><br><span class="line">            tr[i] += d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i; i -= (i &amp; -i))</span><br><span class="line">            s += tr[i];</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n + <span class="number">1</span>, mid;</span><br><span class="line">        <span class="keyword">while</span> (r - l &gt; <span class="number">1</span>)</span><br><span class="line">            (<span class="built_in">get</span>(mid = (l + r) &gt;&gt; <span class="number">1</span>) &lt; k) ? l = mid : r = mid;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">BIT <span class="title">bit</span><span class="params">(<span class="number">1e5</span>)</span></span>;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;Pop&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Invalid\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bit.<span class="built_in">add</span>(s.<span class="built_in">top</span>(), <span class="number">-1</span>);</span><br><span class="line">                cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;Push&quot;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            bit.<span class="built_in">add</span>(x, <span class="number">1</span>);</span><br><span class="line">            s.<span class="built_in">push</span>(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Invalid\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> k = (s.<span class="built_in">size</span>() + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                <span class="type">int</span> val = bit.<span class="built_in">kth</span>(k);</span><br><span class="line">                cout &lt;&lt; val &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vector实现简易平衡树</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">BST</span> &#123;</span><br><span class="line">    vector&lt;T&gt; tr;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(T x)</span> </span>&#123; tr.<span class="built_in">insert</span>(<span class="built_in">lower_bound</span>(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>(), x), x); &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(T x)</span> </span>&#123; tr.<span class="built_in">erase</span>(<span class="built_in">lower_bound</span>(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>(), x)); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rank</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">lower_bound</span>(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>(), x) - tr.<span class="built_in">begin</span>() + <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> tr.<span class="built_in">at</span>(x - <span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">prev</span>(<span class="built_in">lower_bound</span>(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>(), x)); &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nxt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">upper_bound</span>(tr.<span class="built_in">begin</span>(), tr.<span class="built_in">end</span>(), x); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    BST&lt;<span class="type">int</span>&gt; bst;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        string op;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;Pop&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Invalid\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bst.<span class="built_in">erase</span>(s.<span class="built_in">top</span>());</span><br><span class="line">                cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                s.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;Push&quot;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            bst.<span class="built_in">insert</span>(x);</span><br><span class="line">            s.<span class="built_in">push</span>(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Invalid\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> k = (s.<span class="built_in">size</span>() + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                <span class="type">int</span> val = bst.<span class="built_in">kth</span>(k);</span><br><span class="line">                cout &lt;&lt; val &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天梯赛选拔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法集训#1:C++STL基础</title>
      <link href="/2023/12/17/%E7%AE%97%E6%B3%95%E9%9B%86%E8%AE%AD-1-C-STL%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/12/17/%E7%AE%97%E6%B3%95%E9%9B%86%E8%AE%AD-1-C-STL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="头文件引入"><a href="#头文件引入" class="headerlink" title="头文件引入"></a>头文件引入</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span> <span class="comment">// 万能头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="comment">// 使用标准命名空间</span></span><br><span class="line"><span class="comment">// 竞赛玩法，完全避免溢出的错误</span></span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="comment">// signed main() &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="cin-cout"><a href="#cin-cout" class="headerlink" title="cin, cout"></a>cin, cout</h2><p>基本类型变量输入输出</p><p>支持以下类型</p><p><code>int, long long, float, double, char, char[], string</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">int</span> a;</span><br><span class="line">   <span class="type">double</span> b;</span><br><span class="line">   string ss;</span><br><span class="line">   <span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入</span></span><br><span class="line">   cin &gt;&gt; a;</span><br><span class="line">   cin &gt;&gt; b;</span><br><span class="line">   cin &gt;&gt; ss；</span><br><span class="line">   cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">   cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   cout &lt;&lt; b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   cout &lt;&lt; ss &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   cout &lt;&lt; s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式使用，效果等价于上面的输出，cin也可以这么用</span></span><br><span class="line">   cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span> &lt;&lt; b &lt;&lt; <span class="string">&#x27;\n&#x27;</span> &lt;&lt; ss &lt;&lt; <span class="string">&#x27;\n&#x27;</span> &lt;&lt; s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><p>容器，就是存储数据的一个东西</p><p>可以分为两类：</p><p>顺序容器，使用线性存储：1. 动态数组（vector）2. 字符串（string，实际就是特殊化的字符型动态数组）</p><p>关联容器，使用树形存储：1. 集合（set，存储不同的元素）2. 映射（或称为字典）（map，存储键值对）</p><p>容器支持的操作</p><ol><li>迭代器：头指针 <code>begin()</code> 尾指针 <code> end()</code></li><li>容器大小（存储元素个数）：<code>size()</code></li><li>是否为空：<code>empty()</code></li><li>清空：<code>clear()</code></li><li>顺序容器支持的索引随机访问：<code>a[i]</code> 第 i 个元素</li><li>添加：<code>push()</code>, <code>push_back()</code>, <code>insert()</code></li><li>删除：<code>pop()</code>, <code>pop_back()</code>, <code>erase()</code></li></ol><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><a href="https://zh.cppreference.com/w/cpp/string/basic_string">std::basic_string - cppreference.com</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义string并赋值，也可以不赋值</span></span><br><span class="line">string s = <span class="string">&quot;abcdabc&quot;</span>;</span><br><span class="line">string t = <span class="string">&quot;bcd&quot;</span>;</span><br><span class="line"><span class="comment">// 容器大小</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 拼接</span></span><br><span class="line">cout &lt;&lt; s + t &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 随机访问</span></span><br><span class="line">cout &lt;&lt; s[<span class="number">2</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 字串, 从1开始，长度为2的字串</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">substr</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 字符串匹配 O(mn)</span></span><br><span class="line"><span class="keyword">auto</span> pos = s.<span class="built_in">find</span>(<span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">    cout &lt;&lt; pos &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 插入（insert），删除（erase）不常用，暂时先不讲</span></span><br><span class="line"><span class="comment">// 字符串比较（&lt;, &gt; , =, !=, &lt;=, &gt;=），按照字典序比较</span></span><br><span class="line"><span class="comment">// 字串与其他类型的转化</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">stoi</span>(<span class="string">&quot;123&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 转int</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">stoll</span>(<span class="string">&quot;1234567890&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 转long long</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">stod</span>(<span class="string">&quot;1.23&quot;</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 转double</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">to_string</span>(<span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 其他类型转字符串</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2023年天梯赛L1 T6，对insert和erase的考察</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string ss;</span><br><span class="line">    cin &gt;&gt; ss;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="type">int</span> n = b - a + <span class="number">1</span>;</span><br><span class="line">        string cx = ss.<span class="built_in">substr</span>(a - <span class="number">1</span>, n);</span><br><span class="line">        ss.<span class="built_in">erase</span>(a - <span class="number">1</span>, n);</span><br><span class="line">        string s, t;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        string u = s + t;</span><br><span class="line">        <span class="type">int</span> p = ss.<span class="built_in">find</span>(u);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">-1</span>)</span><br><span class="line">            ss += cx;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ss.<span class="built_in">insert</span>(p + s.<span class="built_in">size</span>(), cx);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p><a href="https://zh.cppreference.com/w/cpp/container/vector">std::vector - cppreference.com</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义vector&lt;T&gt;并赋值，也可以不赋值</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">5</span>)</span></span>; <span class="comment">// 大小初始设置为5，默认填充为0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">c</span><span class="params">(<span class="number">5</span>, <span class="number">1</span>)</span></span>; <span class="comment">// 大小初始设置为5，默认填充为1</span></span><br><span class="line"><span class="comment">// 容器大小</span></span><br><span class="line">cout &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 在尾部添加或删除</span></span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">a.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="comment">// 随机访问与遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++)</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 范围循环 c++11 及以上特有的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : a)</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="comment">// a.insert(a.begin() + it, val); // 在位置it插入val</span></span><br><span class="line"><span class="comment">// a.insert(a.begin() + it, bg, ed); // 在位置it插入范围[bg, ed)的数据</span></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="comment">// a.erase(it); // 删除位置it的元素</span></span><br><span class="line"><span class="comment">// a.erase(bg, ed); // 删除范围[bg, ed)的数据</span></span><br><span class="line"><span class="comment">// 比较（&lt;, &gt; , =, !=, &lt;=, &gt;=），按照字典序比较</span></span><br></pre></td></tr></table></figure><h2 id="stack-queue"><a href="#stack-queue" class="headerlink" title="stack - queue"></a>stack - queue</h2><p><a href="https://zh.cppreference.com/w/cpp/container/stack">https://zh.cppreference.com/w/cpp/container/stack</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2 3</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="comment">// 放入2</span></span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 放入3</span></span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 大小</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 在容器非空时执行循环</span></span><br><span class="line"><span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="comment">// 访问栈顶元素</span></span><br><span class="line">    cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">    s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://zh.cppreference.com/w/cpp/container/queue">https://zh.cppreference.com/w/cpp/container/queue</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2 3</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="comment">// 放入2</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 放入2</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 大小</span></span><br><span class="line">cout &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 在容器非空时执行循环</span></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="comment">// 访问队列头部元素</span></span><br><span class="line">    cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// 弹出队列头部元素</span></span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p><a href="https://zh.cppreference.com/w/cpp/container/set">https://zh.cppreference.com/w/cpp/container/set</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义集合s</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 大小</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 计数：返回集合中3的个数</span></span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">count</span>(<span class="number">3</span>)) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s contain 3\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s don&#x27;t contain 3\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历（集合元素默认升序）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : s) &#123;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="comment">// 迭代器遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><a href="https://zh.cppreference.com/w/cpp/container/map">https://zh.cppreference.com/w/cpp/container/map</a></p><p>数组把索引映射到数组的值，a[i] 把 i 映射到数组第 i 个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果我有三个映射：</span><br><span class="line">1 -&gt; 10</span><br><span class="line">10000 -&gt; 100</span><br><span class="line">100000000 -&gt; 1000</span><br><span class="line">那么我需要定义长度大于100000000的数组</span><br><span class="line">int a[100000005];</span><br><span class="line">a[1] = 10;</span><br><span class="line">a[10000] = 100;</span><br><span class="line">a[100000000] = 1000;</span><br><span class="line">这样会爆空间</span><br></pre></td></tr></table></figure><p>所以出现了map，树形结构，红黑树</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">   mp[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">   mp[<span class="number">10000</span>] = <span class="number">100</span>;</span><br><span class="line">   mp[<span class="number">100000000</span>] = <span class="number">1000</span>;</span><br><span class="line">   <span class="keyword">if</span> (mp.<span class="built_in">count</span>(<span class="number">10000</span>)) &#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;mp contain 10000\n&quot;</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       cout &lt;&lt; <span class="string">&quot;mp don&#x27;t contain 10000\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 遍历 </span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> it : mp) &#123;</span><br><span class="line">       cout &lt;&lt; it.first &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; it.second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[k, v] : mp) &#123; <span class="comment">// c++17 结构化绑定 devc++ 没法用的报错 dev只支持c++11</span></span><br><span class="line">       cout &lt;&lt; k &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; v &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>下面是泛型算法，泛型，意味着不限制类型，都可以使用的算法</p><h2 id="reorder-element"><a href="#reorder-element" class="headerlink" title="reorder element"></a>reorder element</h2><h3 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h3><p>交换两个对象的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> t = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    swap(&amp;a, &amp;b);</span><br><span class="line">    <span class="comment">// int t = a;</span></span><br><span class="line">    <span class="comment">// a = b;</span></span><br><span class="line">    <span class="comment">// b = t;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; b;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string a, b;</span><br><span class="line">a = <span class="string">&quot;12&quot;</span>;</span><br><span class="line">b = <span class="string">&quot;21&quot;</span>;</span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&#x27;\n&#x27;</span> &lt;&lt; b &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p> 逆转范围中的元素顺序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">reverse</span>(a, a + <span class="number">5</span>);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">// [ )</span></span><br><span class="line"><span class="comment">// [0 1 2 3 4 5)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++)</span><br><span class="line">    cout &lt;&lt; b[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="permutation"><a href="#permutation" class="headerlink" title="permutation"></a>permutation</h2><h3 id="next-permutation"><a href="#next-permutation" class="headerlink" title="next_permutation"></a>next_permutation</h3><p>产生某个元素范围的按字典顺序的下一个较大的排列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : a)</span><br><span class="line">            cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()));</span><br><span class="line">    <span class="comment">// 4 * 3 * 2 = 24</span></span><br></pre></td></tr></table></figure><h3 id="prev-permutation"><a href="#prev-permutation" class="headerlink" title="prev_permutation"></a>prev_permutation</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : a)</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">prev_permutation</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()));</span><br><span class="line"><span class="comment">// 4 * 3 * 2 = 24</span></span><br><span class="line"><span class="comment">// 字典序</span></span><br></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><h3 id="sort-1"><a href="#sort-1" class="headerlink" title="sort"></a>sort</h3><p>将范围按升序&#x2F;降序排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// sort(a.begin(), a.end(), less()); // &lt;</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="built_in">greater</span>()); <span class="comment">// &gt;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : a)</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><p>自定义排序比较器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125; <span class="comment">// &lt;=&gt; greater()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : a) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> height, weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// struct Node &#123;</span></span><br><span class="line"><span class="comment">//     int height, weight;</span></span><br><span class="line"><span class="comment">// &#125; A[10];</span></span><br><span class="line"><span class="comment">// &lt;=&gt;</span></span><br><span class="line"><span class="comment">// Node A[10];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Node&amp; a, <span class="type">const</span> Node&amp; b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// if (a.attribute1 != b.attribute1) &#123;</span></span><br><span class="line">    <span class="comment">// &#125; else if (a.attribute2 != b.attribute2) &#123;</span></span><br><span class="line">    <span class="comment">// &#125; else &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> a.height != b.height ? a.height &lt; b.height : a.weight &gt; b.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;Node&gt; a;</span><br><span class="line">    a.<span class="built_in">push_back</span>(&#123;<span class="number">175</span>, <span class="number">70</span>&#125;);</span><br><span class="line">    a.<span class="built_in">push_back</span>(&#123;<span class="number">170</span>, <span class="number">68</span>&#125;);</span><br><span class="line">    a.<span class="built_in">push_back</span>(&#123;<span class="number">170</span>, <span class="number">75</span>&#125;);</span><br><span class="line">    a.<span class="built_in">push_back</span>(&#123;<span class="number">165</span>, <span class="number">80</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传统写法</span></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), cmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lambda函数 c++11特性 匿名函数</span></span><br><span class="line">    <span class="comment">// sort(a.begin(), a.end(), [](const Node&amp; a, const Node&amp; b) &#123;</span></span><br><span class="line">    <span class="comment">//     return a.height != b.height ? a.height &lt; b.height : a.weight &gt; b.weight;</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[h, w] : a) &#123;</span><br><span class="line">        cout &lt;&lt; h &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; w &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="change-element"><a href="#change-element" class="headerlink" title="change element"></a>change element</h2><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>将一个给定值复制赋值给一个范围内的每个元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">fill</span>(a, a + <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><p>移除范围内的连续重复元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> end = <span class="built_in">unique</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : a) &#123;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = a.<span class="built_in">begin</span>(); it != end; it++) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">a.<span class="built_in">erase</span>(<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>()), b.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : b) &#123;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="binary-search"><a href="#binary-search" class="headerlink" title="binary search"></a>binary search</h2><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><p>返回指向第一个<em>不小于</em>给定值的元素的迭代器</p><h3 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound"></a>upper_bound</h3><p>返回指向第一个<em>大于</em>给定值的元素的迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">cout &lt;&lt; *<span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">3</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// &gt;=</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">3</span>) - a.<span class="built_in">begin</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;; <span class="comment">// &gt;=</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *<span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">3</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// &gt;</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">3</span>) - a.<span class="built_in">begin</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;; <span class="comment">// &gt;</span></span><br></pre></td></tr></table></figure><h2 id="minmax"><a href="#minmax" class="headerlink" title="minmax"></a>minmax</h2><h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><p>返回各给定值中的较小者</p><h3 id="max"><a href="#max" class="headerlink" title="max"></a>max</h3><p>返回各给定值中的较大者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">min</span>(a, b) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(&#123;a, b, c&#125;) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">min</span>(&#123;a, b, c&#125;) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="min-element"><a href="#min-element" class="headerlink" title="min_element"></a>min_element</h3><p>返回范围内的最小元素</p><h3 id="max-element"><a href="#max-element" class="headerlink" title="max_element"></a>max_element</h3><p>返回范围内的最大元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">cout &lt;&lt; *<span class="built_in">max_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">cout &lt;&lt; *<span class="built_in">min_element</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="numeric"><a href="#numeric" class="headerlink" title="numeric"></a>numeric</h2><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h3><p>对一个范围内的元素求和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">accumulate</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>() + <span class="number">3</span>, <span class="number">0</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h3><p>用从起始值开始连续递增的值填充一个范围</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="comment">// for (int i = 0; i &lt; a.size(); i++)</span></span><br><span class="line"><span class="comment">//     a[i] = i + 1;</span></span><br><span class="line"><span class="built_in">iota</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x : a) &#123;</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年冬季周赛（四）</title>
      <link href="/2023/11/18/2023%E5%B9%B4%E5%86%AC%E5%AD%A3%E5%91%A8%E8%B5%9B%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/11/18/2023%E5%B9%B4%E5%86%AC%E5%AD%A3%E5%91%A8%E8%B5%9B%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-点燃我，温暖你"><a href="#1-点燃我，温暖你" class="headerlink" title="1 点燃我，温暖你"></a>1 点燃我，温暖你</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;   *********   *********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;************* *************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*****************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*****************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*****************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; ***************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;   ***********************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;     *******************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;       ***************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;         ***********\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;           *******\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;             ***\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;              *&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-changge学长的史密斯架"><a href="#2-changge学长的史密斯架" class="headerlink" title="2 changge学长的史密斯架"></a>2 changge学长的史密斯架</h2><p>这个题等之后讲汉诺塔题目后再来写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> d[<span class="number">20</span>], f[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">        d[i] = <span class="number">2</span> * d[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        f[i] = <span class="number">1e9</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            <span class="keyword">if</span> (f[i] &gt; <span class="number">2</span> * f[j] + d[i - j])</span><br><span class="line">                f[i] = <span class="number">2</span> * f[j] + d[i - j];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-数字三角形"><a href="#3-数字三角形" class="headerlink" title="3 数字三角形"></a>3 数字三角形</h2><p>这个题不要求全部同学都掌握。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/95pzs0ne.png"></p><p>考虑从上到下和从下到上的得分都一样，我们从下向上走。</p><p>设 $f[i][j]$ 为从最下层到第 i 层第 j 个的最多得分。</p><p>可以发现，1 的位置只能从下方的 7 和 4 走过去，即 $f[i][j]$ 的得分由 $f[i+1][j]$ 和 $f[i+1][j+1]$ 决定。</p><p>由于我们取最大得分， $f[i][j]&#x3D;\max(f[i+1][j], f[i+1][j+1])+a[i][j]$。</p><p>自下到上的枚举每个位置即可得到总最大得分。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">505</span>][<span class="number">505</span>], f[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        f[n][i] = a[n][i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">            f[i][j] = max(f[i + <span class="number">1</span>][j], f[i + <span class="number">1</span>][j + <span class="number">1</span>]) + a[i][j];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-二进制中1的个数"><a href="#4-二进制中1的个数" class="headerlink" title="4 二进制中1的个数"></a>4 二进制中1的个数</h2><p>位运算或取模都可以写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="type">int</span> x, s = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            s += x &amp; <span class="number">1</span>;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-蛇形矩阵"><a href="#5-蛇形矩阵" class="headerlink" title="5 蛇形矩阵"></a>5 蛇形矩阵</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num[<span class="number">109</span>][<span class="number">109</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    num[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 初始为1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>, tot = <span class="number">1</span>; tot &lt; n * n;) &#123;</span><br><span class="line">        <span class="comment">// 向右</span></span><br><span class="line">        <span class="keyword">while</span> (j + <span class="number">1</span> &lt;= n &amp;&amp; !num[i][j + <span class="number">1</span>])</span><br><span class="line">            num[i][++j] = ++tot;</span><br><span class="line">        <span class="comment">// 向下</span></span><br><span class="line">        <span class="keyword">while</span> (i + <span class="number">1</span> &lt;= n &amp;&amp; !num[i + <span class="number">1</span>][j])</span><br><span class="line">            num[++i][j] = ++tot;</span><br><span class="line">        <span class="comment">// 向左</span></span><br><span class="line">        <span class="keyword">while</span> (j - <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; !num[i][j - <span class="number">1</span>])</span><br><span class="line">            num[i][--j] = ++tot;</span><br><span class="line">        <span class="comment">// 向上</span></span><br><span class="line">        <span class="keyword">while</span> (i - <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; !num[i - <span class="number">1</span>][j])</span><br><span class="line">            num[--i][j] = ++tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span>, num[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-简单矩阵"><a href="#6-简单矩阵" class="headerlink" title="6 简单矩阵"></a>6 简单矩阵</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);  </span><br><span class="line">    <span class="type">int</span> tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i, k = <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--, k++)</span><br><span class="line">            a[j][k] = tot++; <span class="comment">// 斜着向右上方填充数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n + <span class="number">1</span> - i; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-编程团体赛"><a href="#7-编程团体赛" class="headerlink" title="7 编程团体赛"></a>7 编程团体赛</h2><p>C 版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id, score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">team</span>[1005];</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d-%d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">        s[a] += c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 统计有多少个队伍，以及得分，放在arr数组里</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            team[cnt].id = i;</span><br><span class="line">            team[cnt].score = s[i];</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 对结构体进行排序，按照得分的降序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; cnt; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = cnt - <span class="number">1</span>; j &gt;= i; j--)</span><br><span class="line">            <span class="keyword">if</span> (team[j - <span class="number">1</span>].score &lt; team[j].score) &#123;</span><br><span class="line">                <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> <span class="title">tmp</span> =</span> team[j - <span class="number">1</span>];</span><br><span class="line">                team[j - <span class="number">1</span>] = team[j];</span><br><span class="line">                team[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>, team[<span class="number">0</span>].id, team[<span class="number">0</span>].score);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++ 版本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        mp[a] += c;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; <span class="built_in">vp</span>(mp.<span class="built_in">begin</span>(), mp.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">sort</span>(vp.<span class="built_in">begin</span>(), vp.<span class="built_in">end</span>(), [](<span class="type">const</span> <span class="keyword">auto</span> &amp;a, <span class="type">const</span> <span class="keyword">auto</span> &amp;b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.second &gt; b.second;</span><br><span class="line">    &#125;);</span><br><span class="line">    cout &lt;&lt; vp[<span class="number">0</span>].first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; vp[<span class="number">0</span>].second &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年冬季周赛（三）</title>
      <link href="/2023/11/11/2023%E5%B9%B4%E5%86%AC%E5%AD%A3%E5%91%A8%E8%B5%9B%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/11/11/2023%E5%B9%B4%E5%86%AC%E5%AD%A3%E5%91%A8%E8%B5%9B%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-找最大值"><a href="#1-找最大值" class="headerlink" title="1 找最大值"></a>1 找最大值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        mx = mx &gt; x ? mx : x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, mx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-二三得六"><a href="#2-二三得六" class="headerlink" title="2 二三得六"></a>2 二三得六</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="type">int</span> d = m / n;</span><br><span class="line">    <span class="keyword">if</span> (m % n != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (d % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        x++;</span><br><span class="line">        d /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (d % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        y++;</span><br><span class="line">        d /= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d != <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x + y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-奕悟"><a href="#3-奕悟" class="headerlink" title="3 奕悟"></a>3 奕悟</h2><ol><li>首先判断开始和结束坐标是否重合，重合则为0。</li><li>其次判断是否为同一条直线上，若在同一条直线上答案为1。</li><li>如果起点和终点的颜色不同，则不能通过指定方式到达。</li><li>其他情况只需要两步就可以到达。</li></ol><p><img src="https://images.ptausercontent.com/8acfd0db-b313-4d91-894d-c39fe135e423.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">    <span class="keyword">if</span> (x1 == x2 &amp;&amp; y1 == y2) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">abs</span>(x1 - x2) == <span class="built_in">abs</span>(y1 - y2)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((x1 + y1) % <span class="number">2</span> == (x2 + y2) % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-弈研顶针"><a href="#4-弈研顶针" class="headerlink" title="4 弈研顶针"></a>4 弈研顶针</h2><p>考虑先斜着达到终点的同行或同列的位置，再到终点。</p><p>我们发现最短路径的步数为<strong>起点到终点</strong>的<strong>横坐标差</strong>和<strong>纵坐标差</strong>的较大值。</p><p><img src="/img/f9487af4-5b2d-41a7-83be-d654a5653b02.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="built_in">abs</span>(x1 - x2) &gt; <span class="built_in">abs</span>(y1 - y2) ? <span class="built_in">abs</span>(x1 - x2) : <span class="built_in">abs</span>(y1 - y2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-是奇数吗？"><a href="#5-是奇数吗？" class="headerlink" title="5 是奇数吗？"></a>5 是奇数吗？</h2><p>考虑使用前缀和计算区间的和。</p><p>修改区间 $[l,r]$ 的值为 $k$ , 修改后的值为 </p><p>$\sum_{i&#x3D;1}^{n}a_i-\sum_{i&#x3D;l}^{r}a_i+(r-l+1)k&#x3D;pre[n]-(pre[r]-pre[l-1])+(r-l+1)k$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">100010</span>], b[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">        b[i] = b[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> l, r, k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x = b[n] + (r - l + <span class="number">1</span>) * k - (b[r] - b[l - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-它是它的子串吗？"><a href="#6-它是它的子串吗？" class="headerlink" title="6  它是它的子串吗？"></a>6  它是它的子串吗？</h2><p>首先较短的串为子串 substr。</p><p>讲较长的串复制一遍拼接在其后面，在其中查找是否存在字串 substr。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str, substr;</span><br><span class="line">    cin &gt;&gt; str &gt;&gt; substr;</span><br><span class="line">    <span class="keyword">if</span> (substr.<span class="built_in">size</span>() &gt; str.<span class="built_in">size</span>())</span><br><span class="line">        <span class="built_in">swap</span>(str, substr);</span><br><span class="line">    str += str;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">find</span>(substr) != <span class="number">-1</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-死亡顺序"><a href="#7-死亡顺序" class="headerlink" title="7  死亡顺序"></a>7  死亡顺序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; p[n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> b[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">        b[i] %= k;</span><br><span class="line">        <span class="keyword">if</span> (b[i] == <span class="number">0</span>)</span><br><span class="line">            b[i] = k;</span><br><span class="line">        p[i].first = b[i];</span><br><span class="line">        p[i].second = n - i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(p + <span class="number">1</span>, p + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        cout &lt;&lt; n - p[i].second + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年冬季周赛（二）</title>
      <link href="/2023/11/04/2023%E5%B9%B4%E5%86%AC%E5%AD%A3%E5%91%A8%E8%B5%9B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/11/04/2023%E5%B9%B4%E5%86%AC%E5%AD%A3%E5%91%A8%E8%B5%9B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="2-a-b"><a href="#2-a-b" class="headerlink" title="2 a+b?"></a>2 a+b?</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">1000005</span>], b[<span class="number">1000005</span>], ans[<span class="number">1000005</span>];</span><br><span class="line"><span class="type">char</span> s[<span class="number">1000005</span>], t[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, t);</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(s), len2 = <span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len1 - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++) &#123;</span><br><span class="line">        a[j] = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len2 - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++) &#123;</span><br><span class="line">        b[j] = t[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = max(len1, len2) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        ans[i] += a[i] + b[i];</span><br><span class="line">        ans[i + <span class="number">1</span>] += ans[i] / <span class="number">10</span>;</span><br><span class="line">        ans[i] %= <span class="number">10</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ans[len] == <span class="number">0</span>)</span><br><span class="line">        len--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-加训"><a href="#3-加训" class="headerlink" title="3 加训"></a>3 加训</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % m == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;jiashui\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;jiaxun\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Tanphoon大战Joker"><a href="#4-Tanphoon大战Joker" class="headerlink" title="4 Tanphoon大战Joker"></a>4 Tanphoon大战Joker</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Joker\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Tanphoon\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-好吃的学长"><a href="#5-好吃的学长" class="headerlink" title="5 好吃的学长"></a>5 好吃的学长</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">1000005</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        s += a[i];</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-数字游戏"><a href="#6-数字游戏" class="headerlink" title="6  数字游戏"></a>6  数字游戏</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">200010</span>], len = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        a[len++] = n % <span class="number">7</span>;</span><br><span class="line">        n /= <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年冬季周赛（一）</title>
      <link href="/2023/10/28/2023%E5%B9%B4%E5%86%AC%E5%AD%A3%E5%91%A8%E8%B5%9B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/10/28/2023%E5%B9%B4%E5%86%AC%E5%AD%A3%E5%91%A8%E8%B5%9B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\\  /\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; \\/\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; /\\\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;/  \\\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-学号"><a href="#2-学号" class="headerlink" title="2 学号"></a>2 学号</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;20%c%c&quot;</span>, s[<span class="number">0</span>], s[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-平均数"><a href="#3-平均数" class="headerlink" title="3 平均数"></a>3 平均数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> a, b, c, d, n, z;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    z = (a * <span class="number">2.0</span> + b * <span class="number">3.0</span> + c * <span class="number">4.0</span> + d) / <span class="number">10.0</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Media: &quot;</span> &lt;&lt; z &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (z &gt;= <span class="number">7.0</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Aluno aprovado.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt; <span class="number">5.0</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Aluno reprovado.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt; <span class="number">7.0</span> &amp;&amp; z &gt;= <span class="number">5.0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Aluno em exame.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-质数"><a href="#4-质数" class="headerlink" title="4 质数"></a>4 质数</h2><p>所有人必须掌握：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++)</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (isPrime(x)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is prime\n&quot;</span>, x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is not prime\n&quot;</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有能力的可以学习这个：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1000005</span></span><br><span class="line"><span class="type">int</span> isPrime[N + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= N; i++)</span><br><span class="line">        isPrime[i] = <span class="number">1</span>;</span><br><span class="line">    isPrime[<span class="number">0</span>] = isPrime[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span> * i; j &lt;= N; j += i)</span><br><span class="line">            isPrime[j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (isPrime[x]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is prime\n&quot;</span>, x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is not prime\n&quot;</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-斐波那契数列"><a href="#5-斐波那契数列" class="headerlink" title="5 斐波那契数列"></a>5 斐波那契数列</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023招新宣讲会</title>
      <link href="/2023/10/22/2023%E6%8B%9B%E6%96%B0%E5%AE%A3%E8%AE%B2%E4%BC%9A/"/>
      <url>/2023/10/22/2023%E6%8B%9B%E6%96%B0%E5%AE%A3%E8%AE%B2%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<iframe style="width: 100%; aspect-ratio: 16/9;" src="https://player.bilibili.com/player.html?aid=492444185&bvid=BV1tN411x7XS&cid=1307989967&p=1" frameborder="no" scrolling="no" allowfullscreen="allowfullscreen"></iframe>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件开发协会的挑战书</title>
      <link href="/2023/10/20/%E6%9D%A5%E8%87%AA%E7%BC%96%E7%A8%8B%E9%98%9F%E7%9A%84%E6%8C%91%E6%88%98/"/>
      <url>/2023/10/20/%E6%9D%A5%E8%87%AA%E7%BC%96%E7%A8%8B%E9%98%9F%E7%9A%84%E6%8C%91%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>在RSA密码体系中, 欧几里得算法是加密或解密运算的重要组成部分。它的基本运算过程就是解 $ax\equiv 1\pmod n$ 这种方程。整个解的过程是这样的，我们用一个例子来说明。</p><p>当 a &#x3D; 1001 ，n &#x3D; 3837 时，方程为 x * 1001 ≡ 1 (mod 3837)<br>我们有<br>3837 &#x3D; 3 * 1001 + 834<br>1001 &#x3D; 1 * 834 + 167<br> 834 &#x3D; 4 * 167 + 166<br> 167 &#x3D; 1 * 166 + 1</p><p>所以</p><p>1 &#x3D; 167 + (–1) * 166<br>  &#x3D; 167 - (834 - 4 * 167)<br>  &#x3D; -1 * 834 + 5 * 167<br>  &#x3D; 5 *(1001 - 834) – 834<br>  &#x3D; 5 * 1001 + (-6) * 834<br>  &#x3D; 5 * 1001 - 6 * (3837 -3 * 1001)<br>  &#x3D; -6 * 3837 + 23 * 1001</p><p>然后对等式两端同时模 3837 得</p><p>23 * 1001 ≡ 1 (mod 3837)</p><p>于是 x &#x3D; 23</p><p>现在给出 a&#x3D;1699 和 n&#x3D;1110，你能解出这个方程吗？</p><p>现有一串十进制数字 <code>94171??1?</code> 为QQ群号(第6、7、9位未知)其中，第6位和第7位是x的后两位数字</p><p>求得x后补全得群号前8位数字，该数字转16进制后，16进制数的最后一位即为群号的第9位数字</p><p>解出群号进入群聊，且能较清晰地描述解题过程即视为挑战成功。前 5 名将获得软件开发协会纪念礼品一份，第一名将额外获得蓝牙耳机一副。</p><p>本活动仅限于本校学生，老师请勿参赛。（doge）</p><p><img src="/img/%E8%A7%A3%E8%B0%9C%E9%A2%98%E5%8F%91%E5%A5%96.jpg" alt="解迷题发奖"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
